{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":769,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.7752237861463442,\"hacking_speed_mult\":1.6191613105721163,\"hacking_money_mult\":3.4607151941364234,\"hacking_grow_mult\":1.4803805392161695,\"hacking_exp\":21752757.166618608,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":2.2578753246226806,\"strength_mult\":1.634340115294651,\"defense_mult\":1.4211653176475227,\"dexterity_mult\":1.8876628331653218,\"agility_mult\":1.2435196529415824,\"charisma_mult\":1.684748849111609,\"hacking_exp_mult\":2.9808870324694094,\"strength_exp_mult\":1.4981451056867634,\"defense_exp_mult\":1.4981451056867634,\"dexterity_exp_mult\":1.4981451056867634,\"agility_exp_mult\":1.4981451056867634,\"charisma_exp_mult\":1.614550980398625,\"company_rep_mult\":2.1312072941261855,\"faction_rep_mult\":1.6145509803986253,\"money\":73479107057.07585,\"city\":\"New Tokyo\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"run4theh111z\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156224.40000002008,\"ram\":64,\"totalMoneyGenerated\":4175747207.3745694,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156223.8000000201,\"ram\":64,\"totalMoneyGenerated\":4174396322.3755164,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156223.4000000201,\"ram\":64,\"totalMoneyGenerated\":4173278437.796267,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156222.8000000201,\"ram\":64,\"totalMoneyGenerated\":4171928259.1520104,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156222.4000000201,\"ram\":64,\"totalMoneyGenerated\":4170483322.300505,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156221.80000002013,\"ram\":64,\"totalMoneyGenerated\":4168971380.642342,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156221.40000002013,\"ram\":64,\"totalMoneyGenerated\":4167573358.282515,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156220.80000002013,\"ram\":64,\"totalMoneyGenerated\":4166041905.191384,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156220.40000002013,\"ram\":64,\"totalMoneyGenerated\":4164534142.5291896,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156219.80000002016,\"ram\":64,\"totalMoneyGenerated\":4163045093.614022,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156219.40000002016,\"ram\":64,\"totalMoneyGenerated\":4161575723.455938,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":156182.80000002068,\"ram\":64,\"totalMoneyGenerated\":4160122856.3557734,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":129840.79999980066,\"ram\":64,\"totalMoneyGenerated\":3556178404.2157726,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":129840.19999980065,\"ram\":64,\"totalMoneyGenerated\":3556230675.7777734,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":129839.99999980067,\"ram\":64,\"totalMoneyGenerated\":3556290926.8006854,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":129839.99999980067,\"ram\":64,\"totalMoneyGenerated\":3556479372.8102617,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":129838.79999980066,\"ram\":64,\"totalMoneyGenerated\":3556431608.371316,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":129837.19999980065,\"ram\":64,\"totalMoneyGenerated\":3556360507.0604286,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":129836.79999980066,\"ram\":64,\"totalMoneyGenerated\":3556545034.7072287,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":129836.59999980064,\"ram\":64,\"totalMoneyGenerated\":3556594339.13821,\"name\":\"hacknet-node-19\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"MegaCorp\",\"Netburners\",\"Sector-12\",\"NiteSec\",\"CyberSec\",\"The Black Hand\",\"Tian Di Hui\",\"BitRunners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"}],\"augmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"PCMatrix\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-2.1,\"crime_money_mult\":1.2763248856906129,\"crime_success_mult\":1.2763248856906129,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.4471330548704114,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":1.2734253373605569,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":140.39977922930882,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":399.855555931213,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":62800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":2.3149598720046773,\"hacknet_node_money_mult\":2.9869268044629855,\"hacknet_node_purchase_cost_mult\":0.644851542938704,\"hacknet_node_ram_cost_mult\":0.8429431933839266,\"hacknet_node_core_cost_mult\":0.8429431933839266,\"hacknet_node_level_cost_mult\":0.7165017143763376,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1645600644638,\"totalPlaytime\":1798662200,\"playtimeSinceLastAug\":156356200,\"playtimeSinceLastBitnode\":1798662200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":42925147533.37328,\"hacknet\":78468808876.62614,\"hacknet_expenses\":-6984949900.346709,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":73478107057.07585,\"work\":0,\"servers\":0,\"other\":-305899452.1194136,\"augmentations\":-40625000000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4002013,\"class\":-11328,\"codingcontract\":262500000,\"corporation\":0,\"crime\":6987396.145100321,\"gang\":0,\"hacking\":88522178190.02287,\"hacknet\":419710753962.09204,\"hacknet_expenses\":-66689382294.99666,\"hospitalization\":-28218000,\"infiltration\":0,\"sleeves\":0,\"stock\":-31199309929.589535,\"total\":88524306794.97282,\"work\":73259853.13414207,\"servers\":-53911760676.051956,\"other\":-10897692548.823944,\"augmentations\":-257320995883.12268}},\"scriptProdSinceLastAug\":42886723063.53093,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1643885384244},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1643894920823},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1643900797590},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1643906299108},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643911675318},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1643924584948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1643960666103},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643963802896},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643998639673},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644042685265},{\"ID\":\"TOR\",\"unlockedOn\":1644053943665},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1644141194118},{\"ID\":\"NITESEC\",\"unlockedOn\":1644163099111},{\"ID\":\"4S\",\"unlockedOn\":1644176737287},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644187629240},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644218881854},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1644300547385},{\"ID\":\"DONATION\",\"unlockedOn\":1644744654198},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644784347638},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644784347660},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1644787752275},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645600620869}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"28.9.0.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\"],\"ramUsed\":8186.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",3411],\"dataMap\":{\"the-hub\":[42536159803.48876,54576,214893,3411]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":15641.673162755631,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.285,\"onlineExpGained\":10857585.02949743,\"onlineMoneyMade\":42536159803.48876,\"onlineRunningTime\":129457.60999979994,\"pid\":1,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":3411,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///2c5cd6c3-71b6-4798-8764-ef902655c788\",\"moduleSequenceNumber\":204914}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet servers = ns.scan();\\n\\n\\tfor (let server of servers) {\\n\\t\\tns.killall(server)\\n\\t\\tns.tprint(`INFO: killed all scripts on ${server}`)\\n\\t}\\n}\",\"filename\":\"/kill_scripts/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/kill_scripts/main.js\",\"url\":\"blob:https://danielyxie.github.io/6aebf27f-cb36-4c09-8309-a71dbb78230b\",\"moduleSequenceNumber\":3009}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///9cb624c7-dac6-4705-a66a-09262ea6dc1a\",\"moduleSequenceNumber\":363}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///ff32253e-4372-4154-ae1d-959b9e33d7e6\",\"moduleSequenceNumber\":1754}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as TIER} from \\\"2_hacknet/tier-orchestration.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// RUN THE loop and execute the prefered scaling method\\n\\tlet stillUpgrading = false;\\n\\n\\twhile(!stillUpgrading) {\\n\\t\\tstillUpgrading = await TIER(ns) // Orchstrate by Tier System\\n\\t\\tawait ns.sleep(500)\\n\\t}\\n\\n\\tns.tprint(`ERROR: MAX NODES OF ${ns.hacknet.numNodes()} REACHED`)\\n}\",\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/2_hacknet/tier-orchestration.js\",\"url\":\"blob:file:///23d9c413-3194-4f59-876a-8b4e0af6127d\",\"moduleSequenceNumber\":204812},{\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"blob:file:///33135f13-6b2c-4e8d-b7f8-c83ba360342e\",\"moduleSequenceNumber\":204946}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TARGET = \\\"foodnstuff\\\"; //\\\"n00dles\\\"\\n\\n\\t// NS1:\\n\\t//For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n\\tlet growTimes = ns.growthAnalyze(TARGET, 2);\\n\\t//If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n\\n\\tns.tprint(`TEST: ns.growthAnalyze(TARGET, 2) returns ${growTimes}`)\\n\\n\\t////////////////////////////////////\\n\\n\\tlet growth = ns.getServerGrowth(TARGET)\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET)\\n\\tlet availableMoney =ns.getServerMoneyAvailable(TARGET)\\n\\n\\tns.tprint(`INFO: BEFORE Rate = ${growth}, ${availableMoney.toLocaleString('de-DE')} of  ${maxMoney.toLocaleString('de-DE')}`)\\n\\tawait ns.grow(TARGET);\\n\\tgrowth = ns.getServerGrowth(TARGET);\\n\\tavailableMoney =ns.getServerMoneyAvailable(TARGET);\\n\\tns.tprint(`INFO: AFTER Rate = ${growth}, ${availableMoney.toLocaleString('de-DE')} of  ${maxMoney.toLocaleString('de-DE')}`)\\n\\t\\n\\n\\t/////////\\n\\t// a) don't push over omney limit\\n\\t// b) start growth if under certain % of money level\\n\\t// c) estimate how much growth operations to grow until x% of growth\\n\\n\\t// Configuration variables\\n\\tlet min_percentage = 0.5; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\n\\n\\t\\n\\t\\n}\",\"filename\":\"/1_hack/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/test.js\",\"url\":\"blob:https://danielyxie.github.io/bd73d23c-f00a-406e-91e5-f08c8b6b81d4\",\"moduleSequenceNumber\":30778}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"att_specific.js\",\"url\":\"blob:file:///ad56aa82-23c8-47b3-9a70-c743c87e7588\",\"moduleSequenceNumber\":204882}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///9d803a18-042b-4194-9b39-0ed866193368\",\"moduleSequenceNumber\":184},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///63436c73-3cd6-4814-b20c-1b3555cb5fa1\",\"moduleSequenceNumber\":187},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///a5a9f2e2-bf6f-4183-bb43-ee4bc1925c50\",\"moduleSequenceNumber\":1314}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns\\n * @returns {Object[]} cluster information as name, gb, ram etc. \\n **/\\nasync function getClusterData(ns) {\\n\\tlet nodeCount = ns.hacknet.numNodes()\\n\\t// there is no node yet\\n\\tif (nodeCount == 0) {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet cluster = []\\n\\tfor (let i = 0; i < nodeCount; i++) {\\n\\t\\tlet singleNode = await ns.hacknet.getNodeStats(i);\\n\\t\\tcluster.push(singleNode)\\n\\t}\\n\\n\\treturn cluster;\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} nodeNum \\n * @returns {Object[]} the first \\\"nodeNum\\\" of the cluster information\\n **/\\nasync function getXNodes(clusterData, nodeNum) {\\n\\treturn await clusterData.slice(0, nodeNum);\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxLevel  \\n * @returns {Object[]} a sorted array of nodes which did not reach maxLevel yet\\n **/\\nasync function nodesByMinLevel(clusterData, maxLevel) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.level > b.level) ? 1 : -1) // sorted by min level => buy low levels first\\n\\t\\t.filter(node => node.level < maxLevel)\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxRam \\n * @returns {Object[]} a sorted array of nodes which did not reach maxRam  yet\\n **/\\nasync function nodesByMinRam(clusterData, maxRam) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.ram > b.ram) ? 1 : -1) // sorted by min ram => buy low ram first\\n\\t\\t.filter(node => node.ram < maxRam)\\n\\t\\t\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxRam \\n * @returns {Object[]} a sorted array of nodes which did not reach maxCores  yet\\n **/\\nasync function nodesByMinCores(clusterData, maxCores) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.cores > b.cores) ? 1 : -1) // sorted by min cores => buy low amount cores first\\n\\t\\t.filter(node => node.cores < maxCores)\\n}\\n\\n/** \\n * Loop to buy nodes until you are out of money or the max is reached\\n * @param {NS} ns \\n * @param {Number} maxNodestoBuy \\n **/\\nasync function buyNumNodes(ns, maxNodesToBuy) {\\n\\tns.print(\\\"INFO: buyNumNodes() check\\\")\\n\\tlet numNodes = ns.hacknet.numNodes();\\n\\tlet money =  Math.floor(ns.getPlayer().money) - 1; // -1 to avoid rounding errors\\n\\tlet price =  Math.floor(ns.hacknet.getPurchaseNodeCost());\\n\\n\\tif (numNodes < maxNodesToBuy && money > price) {\\n\\t\\tlet nodeName = ns.hacknet.purchaseNode();\\n\\t\\tns.tprint(`INFO: Purchased hacknet-node-${nodeName}`);\\n\\t}\\n}\\n\\n/**\\n * - Loop to buy ram until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumRam(ns, cluster) {\\n\\t// check if there are clusters which do not have the max ram\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more RAM to nodes because defined 'maxRamToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeRam(nodeIndex , 1) // buy ram\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to ${cluster[0].ram} ram`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n/**\\n * - Loop to buy level until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumLevel(ns, cluster) {\\n\\t// check if there are clusters which do not have the max level\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more Level to nodes because defined 'maxLevelToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeLevel(nodeIndex , 10) // buy level\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to level ${ns.hacknet.getNodeStats(nodeIndex).level}`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n/**\\n * - Loop to buy cores until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumCores(ns, cluster) {\\n\\t// check if there are clusters which do not have the core ram\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more cores to nodes because defined 'maxCoresToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeCore(nodeIndex , 1) // buy ram\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to ${cluster[0].cores + 1} cores`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst CLUSTER = await getClusterData(ns);\\n\\n\\tlet OPERATIONS_LOG = {\\n\\t\\t\\\"max_nodes\\\": 12,\\n\\t\\t\\\"a\\\": false,\\n\\t\\t\\\"b\\\": false,\\n\\t\\t\\\"c\\\" : false,\\n\\t\\t\\\"d\\\" : false,\\n\\t\\t\\\"e\\\" : false,\\n\\t\\t\\\"f\\\" :false,\\n\\t\\t\\\"g\\\" : false,\\n\\t}\\n\\n\\t////////////\\n\\t// a) purchase X nodes\\n\\tif(ns.hacknet.numNodes() < OPERATIONS_LOG.max_nodes)\\t{\\n\\t\\treturn await buyNumNodes(ns, OPERATIONS_LOG.max_nodes)\\n\\t} else {\\n\\t\\tns.print(`INFO: Operation a) | MAX_NODES of ${OPERATIONS_LOG.max_nodes} reached`);\\n\\t\\tOPERATIONS_LOG.a = true;\\n\\t}\\n\\n\\tif(!OPERATIONS_LOG.a){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t////////////\\n\\t// b) upgrade X nodes to 16gb ram\\n\\tlet maxRam = 16\\n\\t// order nodes by min ram\\n\\tlet clusterByRam = await nodesByMinRam(CLUSTER, maxRam);\\n\\t// if there are no upgradable nodes (conditions apply) it returns false\\n\\tlet bStillToBeUpgraded = await buyNumRam(ns, clusterByRam)\\n\\tif (!bStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation b) | relevant nodes fully upgraded to ${maxRam} gb ram`)\\n\\t\\tOPERATIONS_LOG.b = true;\\n\\t}\\n\\t\\n\\tif(!OPERATIONS_LOG.b){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// c) upgrade X nodes to level 100\\n\\tlet maxLevel = 100\\n\\tlet clusterByLevel = await nodesByMinLevel(CLUSTER, maxLevel);\\n\\tlet cStillToBeUpgraded = await buyNumLevel(ns, clusterByLevel);\\n\\tif (!cStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation c) | relevant nodes fully upgraded to level ${maxLevel}`)\\n\\t\\tOPERATIONS_LOG.c = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.c){\\n\\t\\treturn false;\\n\\t}\\n\\n\\n\\t///////////\\n\\t// d) upgrade X nodes to 4 cores\\n\\tlet maxCores = 4\\n\\tlet clusterByCore = await nodesByMinCores(CLUSTER, maxCores);\\n\\tlet dStillToBeUpgraded = await buyNumCores(ns, clusterByCore);\\n\\tif (!dStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation d) | relevant nodes fully upgraded to ${maxCores} cores`)\\n\\t\\tOPERATIONS_LOG.d = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.d){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// e) upgrade X nodes to 64gb ram\\n\\tmaxRam = 64\\n\\t// order nodes by min ram\\n\\tclusterByRam = await nodesByMinRam(CLUSTER, maxRam);\\n\\t// if there are no upgradable nodes (conditions apply) it returns false\\n\\tlet eStillToBeUpgraded = await buyNumRam(ns, clusterByRam)\\n\\tif (!eStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation e) | relevant nodes fully upgraded to ${maxRam} gb ram`)\\n\\t\\tOPERATIONS_LOG.e = true;\\n\\t}\\n\\t\\n\\tif(!OPERATIONS_LOG.e){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// f) upgrade X nodes to level 200\\n\\tmaxLevel = 200\\n\\tclusterByLevel = await nodesByMinLevel(CLUSTER, maxLevel);\\n\\tlet fStillToBeUpgraded = await buyNumLevel(ns, clusterByLevel);\\n\\tif (!fStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation f) | relevant nodes fully upgraded to level ${maxLevel}`)\\n\\t\\tOPERATIONS_LOG.f = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.f){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// g) upgrade X nodes to 16 cores\\n\\tmaxCores = 16\\n\\tclusterByCore = await nodesByMinCores(CLUSTER, maxCores);\\n\\tlet gStillToBeUpgraded = await buyNumCores(ns, clusterByCore);\\n\\tif (!gStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation g) | relevant nodes fully upgraded to ${maxCores} cores`)\\n\\t\\tOPERATIONS_LOG.g = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.g){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// h) \\n\\t/// Repeat with next two nodes\\n\\tOPERATIONS_LOG = {\\n\\t\\t\\\"max_nodes\\\": OPERATIONS_LOG.max_nodes + 2,\\n\\t\\t\\\"a\\\": false,\\n\\t\\t\\\"b\\\": false,\\n\\t\\t\\\"c\\\" : false,\\n\\t\\t\\\"d\\\" : false,\\n\\t\\t\\\"e\\\" : false,\\n\\t\\t\\\"f\\\" :false,\\n\\t\\t\\\"g\\\" : false,\\n\\t}\\n\\n// TODO\\n\\t// change to 16\\n\\tif (OPERATIONS_LOG.max_nodes > 18) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\n}\",\"filename\":\"/2_hacknet/tier-orchestration.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"home\",\"moduleSequenceNumber\":191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///2a482fc5-53db-4b1c-a70d-3c78ca5a7e3c\",\"moduleSequenceNumber\":184},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///15929145-3487-42c1-862e-2c2bfa369652\",\"moduleSequenceNumber\":363}],\"dependents\":[],\"ramUsage\":5,\"server\":\"home\",\"moduleSequenceNumber\":192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags._.length === 0 || flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const server = flags._[0];\\n        let money = ns.getServerMoneyAvailable(server);\\n        if (money === 0) money = 1;\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        ns.clearLog(server);\\n        ns.print(`${server}:`);\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"monitor.js\",\"url\":\"blob:file:///7633c217-823d-475f-9e45-343f69869ef5\",\"moduleSequenceNumber\":136492}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"some_shit.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"Todo\\nFix \\\"root-Spread.js\\\"\\n- How can I make it smaller than 4GB => delete 350mb!!\\n\\n- Can I load the getRoot.js \\\"port tools\\\" conditionally from server space?\\n=> light version with small servers\\n=> full version with big servers\\n\\n\\nDo not move scripts in the same step\\n// that in seperate step by creating 2 scripts out of that\\n// probably with tail command\\nawait moveScripts(ns, targetServer)\\n\\n\\nDESCRIPTION\\n- not all possible rooting attacks are working\\n\\t=> never cracks zer0!! not enough ram on n00dles\\n\\tTotal:     4.00GB\\n\\nError\\n[n00dles ~/]> run root-spread.js \\nThis machine does not have enough RAM to run this script with 1 threads. Script requires 4.35GB of RAM\\n\\n\\n\\nSCRIPT RAM \\n\\ngetServer (fn)\\t2.00GB\\nbaseCost (misc)\\t1.60GB\\nexec (fn)\\t1.30GB\\nscp (fn)\\t600.00MB\\nscan (fn)\\t200.00MB\\ngetServerRequiredHackingLevel (fn)\\t100.00MB\\nfileExists (fn)\\t100.00MB\\ngetHackingLevel (fn)\\t50.00MB\\nnuke (fn)\\t50.00MB\\nhasRootAccess (fn)\\t50.00MB\\nbrutessh (fn)\\t50.00MB\\nftpcrack (fn)\\t50.00MB\\nrelaysmtp (fn)\\t50.00MB\\nhttpworm (fn)\\t50.00MB\\nsqlinject (fn)\\t50.00MB\\n\\n\\nROUTE:\\n\\nhome => n00dles => zer0\\n\\n------Root Access: NO, Required hacking skill: 75\\n\\n------Number of open ports required to NUKE: 1\\n\\n------RAM: 32.00GB\\n\\n###################################################\\n\\nSpread Self_Attack\\n- Loop durch die nächsten Netzwerke\\n\\t- Wenn Ram zu gering => continue\\n\\t- Wenn nicht Root Server => continue\\n\\t- Start hack dich selbst\\nFIXME ==> Es werde nicht alle Server gestartet\\n\\t\\t\\tVielleicht ist das Skript auch zu groß um es zu verteilen!\\n==> Alternative => Das Skript nicht auf den Servern, sondern jeweils\\n\\tvon Home aus anfahren lassen\\n\\n###################################################\\nImprove HACK\\n\\n\\n- s) check if the grow gives information about the efficency \\n\\t\\tgrow: Available money on 'iron-gym' grown by 3.888115%. Gained 2.631k hacking exp (t=216).\\n\\t=> logs give a hint in %; 3.88% is quite low => at this point you can attack again\\n\\t=> do not grow from x to y percent, but decide by general growth rate\\n\\t\\t=> if it's very low then reduce growing until it's nearly drained\\n\\t\\t=> if it's high use grow extensiveley\\n\\t- to write this => write a scripts which loops through connected servers\\n\\t\\tcheck the grow rate and see what's low and what's high\\n\\n- b) weaken() only after a couple of tries defiened by chance to crack\\n\\n- c) Hack does not work!!\\n\\nfoodnstuff's security level is 3 of 3\\n\\nReached min security level of foodnstuff: 3 of 3\\n\\nhack: Executing on 'foodnstuff' in 4.700 seconds (t=425)\\n\\nhack: Successfully hacked 'foodnstuff' for $0.000 and 1.072k exp (t=425)\\n\\nERROR: hacking foodnstuff failed.\\nStarting proces to lower security level\\n\\ngetServerMinSecurityLevel: returned 3.000 for foodnstuff\\n\\ngetServerSecurityLevel: returned 3.390 for 'foodnstuff'\\n\\nweaken: Executing on 'foodnstuff' in 18.838 seconds (t=425)\\n\\n\\n###################################################\\nWrite Automatic Nodes \\n=> think about optimizing it\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.046,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"85.0.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":41029223934,\"moneyMax\":1025730598350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1140,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"79.4.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":57485866319,\"moneyMax\":1437146657975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1221,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-250586.cct\",\"type\":\"Total Ways to Sum\",\"data\":27,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"52.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":29557984318,\"moneyMax\":738949607950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1150,\"serverGrowth\":66}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"86.2.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":19114438813,\"moneyMax\":477860970325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1011,\"serverGrowth\":70}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374871-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[155,48,128,66,20,188,175,154,94,30,34,70,127,95,79,32,125,162,67,171,141,82],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"90.1.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20486102768,\"moneyMax\":512152569200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1026,\"serverGrowth\":80}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"37.8.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":18896866291,\"moneyMax\":472421657275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":69}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"30.8.4.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":19579288578,\"moneyMax\":489482214450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":920,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"93.5.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":24401586589,\"moneyMax\":610039664725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1202,\"serverGrowth\":89}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"57.8.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":29914027798,\"moneyMax\":747850694950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1184,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"70.7.6.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1616415401,\"moneyMax\":40410385025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1200,\"serverGrowth\":99}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590887-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[3,7],[8,4,5],[5,4,5,1],[7,7,5,3,7],[8,7,1,1,5,8],[3,9,7,9,5,3,4],[1,9,3,5,8,1,1,6],[9,9,3,8,9,1,4,6,6]],\"reward\":{\"name\":\"MegaCorp\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"93.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1407,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-563114.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[49,135,103,182,194,91,49,29,127,69,145,96,190,141,64,92,82,28,156,83,120,51,30,4,37,146,14,84,89,175,22],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"46.9.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1071874650,\"moneyMax\":26796866250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":77}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"29.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":856351496,\"moneyMax\":21408787400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":56}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"2.6.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":620749760,\"moneyMax\":15518744000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":935,\"serverGrowth\":48}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-372544.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"13011761214\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"70.9.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":610906929,\"moneyMax\":15272673225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":883,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"16.7.8.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":746378385,\"moneyMax\":18659459625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"6.7.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":995548532,\"moneyMax\":24888713300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":922,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"64.5.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1163460752,\"moneyMax\":29086518800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"83.7.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":829763446,\"moneyMax\":20744086150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"24.1.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":696163767,\"moneyMax\":17404094175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":78}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"44.9.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":808144789,\"moneyMax\":20203619725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":940,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42817.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[8,5],[1,9,2]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"77.1.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":802141068,\"moneyMax\":20053526700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"5.9.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1011065360,\"moneyMax\":25276634000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-942602.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,4,6,7,2,0,0,7,10,6,2,0,9,4,0,10,0,10,1,10,9,10,0,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"99.3.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":984007794,\"moneyMax\":24600194850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"16.3.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1075613196,\"moneyMax\":26890329900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-84619.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,1,0,8,0,6,9,8,8,10,1,0,6,4],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"68.7.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":709671771,\"moneyMax\":17741794275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"84.9.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":712391252,\"moneyMax\":17809781300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"75.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1570059668,\"moneyMax\":39251491700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"39.0.6.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1516723538,\"moneyMax\":37918088450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"63.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1241286288,\"moneyMax\":31032157200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"9.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1357905716,\"moneyMax\":33947642900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"56.6.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1013114841,\"moneyMax\":25327871025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-137562-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,1],[0,1],[0,1],[0,0],[0,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"60.4.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":730341243,\"moneyMax\":18258531075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":715,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"34.7.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":57.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",24],\"dataMap\":{\"the-hub\":[0,48,24,1488]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87.08828710162257,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.292,\"onlineExpGained\":60449.32360104553,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.00999979994,\"pid\":2,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":24,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///04804b5e-ef25-417e-8c6b-0191d5fc96b8\",\"moduleSequenceNumber\":198},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///f8b19262-c8eb-4c1a-b1ff-f7e02b3f976c\",\"moduleSequenceNumber\":197},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///8d3e4d58-a82a-4971-948d-6d3ca6915e82\",\"moduleSequenceNumber\":1336}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"rho-construction\",\"moduleSequenceNumber\":195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"rho-construction\",\"moduleSequenceNumber\":198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///faab5bdb-12a4-444e-b58d-1475008b8887\",\"moduleSequenceNumber\":364}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///3209754b-f7cd-4e5a-a379-5e4aa3d3c197\",\"moduleSequenceNumber\":198},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///310d34cc-8bcb-4a31-b70e-c2e1bc4b3a82\",\"moduleSequenceNumber\":404}],\"dependents\":[],\"ramUsage\":5,\"server\":\"rho-construction\",\"moduleSequenceNumber\":200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":552789750,\"moneyMax\":13819743750,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":498,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-989290.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"204178191160\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"18.3.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":694921723,\"moneyMax\":17373043075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":561,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"83.9.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,11,11,671]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.28982752289639,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.30599999999998,\"onlineExpGained\":27269.62596831942,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.00999979994,\"pid\":3,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":11,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///4ce2d48e-6cb4-4f0b-a332-8edd83eb67c7\",\"moduleSequenceNumber\":204},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///ac1a8da1-ffec-4a79-a1e9-9b75d84068c9\",\"moduleSequenceNumber\":203},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///16ed99c4-2914-45b3-bbd6-3da822882fbe\",\"moduleSequenceNumber\":1335}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"aevum-police\",\"moduleSequenceNumber\":201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"aevum-police\",\"moduleSequenceNumber\":204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///e3b8456a-a8c9-4a4a-9154-321cb8cc381c\",\"moduleSequenceNumber\":365}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///e02faa31-944e-4f54-9ec9-8c45d8201c21\",\"moduleSequenceNumber\":204},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///a7bf9a27-5cf7-4e83-acf9-d5d64244d66d\",\"moduleSequenceNumber\":402}],\"dependents\":[],\"ramUsage\":5,\"server\":\"aevum-police\",\"moduleSequenceNumber\":206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":348706147,\"moneyMax\":8717653675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":444,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327468.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7524950708\",-80],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"69.8.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":187929039,\"moneyMax\":4698225975,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":421,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"26.6.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":847030662,\"moneyMax\":21175766550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":733,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-267647.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"87.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":9.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{\"the-hub\":[0,4,4,244]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14.230443089030862,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.31099999999998,\"onlineExpGained\":9876.562714344065,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.00999979994,\"pid\":4,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///9e8d102d-4899-4965-bbfa-7a9b6b9457de\",\"moduleSequenceNumber\":210},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///b2617bd5-45cb-4e6c-a22e-ef9a78e01209\",\"moduleSequenceNumber\":209},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///4f5ca28f-cba6-4f5f-8730-2a49231f1b52\",\"moduleSequenceNumber\":1334}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"summit-uni\",\"moduleSequenceNumber\":207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"summit-uni\",\"moduleSequenceNumber\":210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///cbe80b23-76bf-46c6-a8c1-fbf85836bfd5\",\"moduleSequenceNumber\":366}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///1988c733-1a3b-4397-89f2-c04471ef1062\",\"moduleSequenceNumber\":210},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///6620cc21-55d5-4857-9aaf-04d2ecab57ad\",\"moduleSequenceNumber\":399}],\"dependents\":[],\"ramUsage\":5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":216151111,\"moneyMax\":5403777775,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":445,\"serverGrowth\":56}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"85.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"syscore\",\"moduleSequenceNumber\":213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"syscore\",\"moduleSequenceNumber\":214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"syscore\",\"moduleSequenceNumber\":215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"syscore\",\"moduleSequenceNumber\":216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"syscore\",\"moduleSequenceNumber\":218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":458122828,\"moneyMax\":11453070700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":586,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"70.0.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":9.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{\"the-hub\":[0,4,4,244]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14.23120693050724,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.321,\"onlineExpGained\":9876.562714344065,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.00999979994,\"pid\":5,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///f9724907-0f12-40b0-9a23-62f1b1409958\",\"moduleSequenceNumber\":222},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///2d5b3901-e38d-4f57-9757-8eca1e234a16\",\"moduleSequenceNumber\":221},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///520b8788-7c81-4d28-a9de-a68e2a9c686b\",\"moduleSequenceNumber\":1332}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"catalyst\",\"moduleSequenceNumber\":219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"catalyst\",\"moduleSequenceNumber\":222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///1df12497-616d-4e04-9d51-a62a2a7cb69d\",\"moduleSequenceNumber\":367}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///0a68d5df-1309-4587-818b-236e0d59110d\",\"moduleSequenceNumber\":222},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///b2618ece-eb26-4553-bd9f-08808003f368\",\"moduleSequenceNumber\":396}],\"dependents\":[],\"ramUsage\":5,\"server\":\"catalyst\",\"moduleSequenceNumber\":224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":455058789,\"moneyMax\":11376469725,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":443,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-472794.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[8,2],[1,8,1],[8,8,9,9],[4,4,1,7,3],[2,3,9,4,4,7],[9,9,8,9,5,5,4],[3,1,9,9,7,8,7,6],[9,8,6,5,8,5,1,2,9]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"88.1.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,11,11,671]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.13707939733087,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.327,\"onlineExpGained\":27160.54746444614,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.00999979994,\"pid\":6,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":11,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///9216075a-ffba-4904-85b9-1fe72d1aacd4\",\"moduleSequenceNumber\":228},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///234aa423-9736-47bf-b304-7506828c272d\",\"moduleSequenceNumber\":227},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///be99c06f-ed17-4d2e-9fbf-f8aaf1a88578\",\"moduleSequenceNumber\":1330}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"the-hub\",\"moduleSequenceNumber\":225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"the-hub\",\"moduleSequenceNumber\":228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///90132d40-c10b-4687-b484-fd82533f8864\",\"moduleSequenceNumber\":368}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///451aa6c4-61a4-434b-9869-eb7e96bd4873\",\"moduleSequenceNumber\":228},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///afe44b41-cdc3-4969-b8ae-d961d5ff088c\",\"moduleSequenceNumber\":391}],\"dependents\":[],\"ramUsage\":5,\"server\":\"the-hub\",\"moduleSequenceNumber\":230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":19.45974999999999,\"minDifficulty\":14,\"moneyAvailable\":8229657.799519287,\"moneyMax\":3848465400,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":276,\"serverGrowth\":47}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"55.8.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"comptek\",\"moduleSequenceNumber\":231}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"comptek\",\"moduleSequenceNumber\":232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"comptek\",\"moduleSequenceNumber\":233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"comptek\",\"moduleSequenceNumber\":234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"comptek\",\"moduleSequenceNumber\":236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":243129843,\"moneyMax\":6078246075,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":358,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-451012-Sector-12.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,18],[10,13],[2,5],[18,27],[21,27],[6,8],[4,8]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"17.3.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,11,11,671]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.138549792172896,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.334,\"onlineExpGained\":27160.54746444614,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.00999979994,\"pid\":7,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":11,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///e0de7780-fe1c-46fa-a25a-4b472a857b36\",\"moduleSequenceNumber\":240},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///b21e2873-6d83-4f1d-aaee-46b9e28e1408\",\"moduleSequenceNumber\":239},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///4cdae39e-d4d8-45e6-85f9-283b00fe7838\",\"moduleSequenceNumber\":1329}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"netlink\",\"moduleSequenceNumber\":237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"netlink\",\"moduleSequenceNumber\":238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"netlink\",\"moduleSequenceNumber\":239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"netlink\",\"moduleSequenceNumber\":240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///b44d9c4f-e16c-43c5-a269-62194f4afb9a\",\"moduleSequenceNumber\":369}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///2bdad00f-d973-4088-9c93-7ed324a161aa\",\"moduleSequenceNumber\":240},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///6f8098c4-346c-40a3-8900-4e68e749faa3\",\"moduleSequenceNumber\":389}],\"dependents\":[],\"ramUsage\":5,\"server\":\"netlink\",\"moduleSequenceNumber\":242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":408,\"serverGrowth\":74}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"47.9.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":71414392,\"moneyMax\":1785359800,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":277,\"serverGrowth\":37}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-796881.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[91,63,9,149,175,83,199,120,166,158,105,20,91,51,63,132,101,189,34,193,19,70,63,89,126,76,1,2,96,6,25,197,192,27,149,197,27,12,132,119],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"56.1.2.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"n00dles\",\"moduleSequenceNumber\":249}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"n00dles\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"n00dles\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":15.022,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"84.6.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":9.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{\"the-hub\":[0,4,4,244]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14.232537816070739,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.339,\"onlineExpGained\":9876.562714344065,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.40999979994,\"pid\":8,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":4,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///94aa9cfb-58c7-4942-81fb-b8478b28a545\",\"moduleSequenceNumber\":205305}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///1107f1f9-5cbc-4e6b-a3ed-f899e8e8e5a0\",\"moduleSequenceNumber\":258},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///3fe4495c-6832-4853-ae70-d83dba0cefcf\",\"moduleSequenceNumber\":257},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///aa428871-f835-437f-be89-aab1d23171c6\",\"moduleSequenceNumber\":1315}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///34ccf44d-0983-4687-88d1-4836d2d5bd98\",\"moduleSequenceNumber\":370}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///b961896f-2f52-4ed1-9c7e-76779fc749fe\",\"moduleSequenceNumber\":258},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///36df7e43-66c7-4356-aa46-3bd2f6aa8178\",\"moduleSequenceNumber\":364}],\"dependents\":[],\"ramUsage\":5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"57.7.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":9.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{\"the-hub\":[0,0,4,244]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14.232996119538779,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.345,\"onlineExpGained\":9876.562714344065,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.40999979994,\"pid\":9,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":4,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///f73acbae-78d8-48f5-aa78-eb12758f8a72\",\"moduleSequenceNumber\":205306}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///47fab179-3785-4a59-9e28-28d4a600d421\",\"moduleSequenceNumber\":264},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///58cd154b-4533-490a-b4c2-9623786c4526\",\"moduleSequenceNumber\":263},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///8503e4d8-4642-4bc5-9d45-e88da9c09aac\",\"moduleSequenceNumber\":1316}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///4f3f77e5-7b0c-410e-8b65-38123eee8298\",\"moduleSequenceNumber\":371}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///bf1f654e-476a-459b-a81d-a1a8e88c34d7\",\"moduleSequenceNumber\":264},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///aea1ed52-fbd4-4754-a2dd-0dda31527873\",\"moduleSequenceNumber\":365}],\"dependents\":[],\"ramUsage\":5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"15.3.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":9.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{\"the-hub\":[0,0,4,244]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14.233607190829497,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.35299999999998,\"onlineExpGained\":9876.562714344065,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.40999979994,\"pid\":10,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":4,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///86ef3b84-333a-4ea2-a769-5f25555f3896\",\"moduleSequenceNumber\":205307}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///34cdc755-eff8-4e72-bdc7-daace0b7ce27\",\"moduleSequenceNumber\":270},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///ce89fffc-601f-4f80-85db-536ca5bb26a1\",\"moduleSequenceNumber\":269},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///ac540ce5-6091-42df-a3cc-e4b3d09ebb16\",\"moduleSequenceNumber\":1317}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"joesguns\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"joesguns\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///57d0ee34-405f-4253-8204-2e0e243608c3\",\"moduleSequenceNumber\":372}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///345aea3c-309f-4996-a1c0-449790bc90d1\",\"moduleSequenceNumber\":270},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///10b6b56e-17d1-4f3a-a1fe-ffc422b4a962\",\"moduleSequenceNumber\":366}],\"dependents\":[],\"ramUsage\":5,\"server\":\"joesguns\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"85.5.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,0,11,671]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.14374065572692,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.35899999999998,\"onlineExpGained\":27160.54746444614,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.20999979995,\"pid\":11,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":11,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///85ef3f13-b3dc-403c-af0d-b31cc2b02f0b\",\"moduleSequenceNumber\":205314}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///4a5dde6a-6f6d-4895-88ca-483b6f7bc527\",\"moduleSequenceNumber\":276},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///96ef9456-444f-433b-8698-8bd43275fe88\",\"moduleSequenceNumber\":275},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///d18d1794-3f8a-4f89-934a-67fbdf7dba67\",\"moduleSequenceNumber\":1321}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"zer0\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"zer0\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zer0\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"zer0\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///ae169db3-efb0-40a1-b1d0-b52481f022ae\",\"moduleSequenceNumber\":373}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///b7a6f5c5-993d-46f9-9381-9ce9a7c8a68d\",\"moduleSequenceNumber\":276},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///87779f1b-42e1-4242-b03d-5da881dbf4dd\",\"moduleSequenceNumber\":371}],\"dependents\":[],\"ramUsage\":5,\"server\":\"zer0\",\"moduleSequenceNumber\":278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"34.2.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":9.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{\"the-hub\":[0,4,4,244]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14.234851351468333,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.369,\"onlineExpGained\":9876.562714344065,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.20999979995,\"pid\":12,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":4,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///d7f2db8e-ed26-49b7-998c-9af9d0bca554\",\"moduleSequenceNumber\":205316}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///fea2e133-c516-47a6-b526-0e43e1a17307\",\"moduleSequenceNumber\":282},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///357d07bc-5a38-425b-b158-baa88e182243\",\"moduleSequenceNumber\":281},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///e6cca2de-1a21-4520-b8cb-96433a12c60b\",\"moduleSequenceNumber\":1323}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"nectar-net\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"nectar-net\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///95551cb5-ad3d-4a83-a18f-a0c0ac0d20f0\",\"moduleSequenceNumber\":374}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///dbd039a6-842a-415b-8a20-7bbbae8180f0\",\"moduleSequenceNumber\":282},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///d65c0c00-1c80-4853-8246-d92946ce427d\",\"moduleSequenceNumber\":376}],\"dependents\":[],\"ramUsage\":5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"51.6.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,22,44,649]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.93318792959117,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.375,\"onlineExpGained\":27705.939983812525,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.20999979995,\"pid\":13,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":11,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///5d78fafb-cdc0-468d-8c51-efd83b56213a\",\"moduleSequenceNumber\":205318}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///55defbb8-ece0-4a11-b37e-aa0f49bc221b\",\"moduleSequenceNumber\":288},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///c2cf9157-61c6-4b74-989f-d8b81bc07420\",\"moduleSequenceNumber\":287},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///9bf43398-3401-45af-9c10-65539e9eaed2\",\"moduleSequenceNumber\":1325}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"neo-net\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"neo-net\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///141375e8-e4b7-4eb6-af2a-691354b2967b\",\"moduleSequenceNumber\":375}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///93b935f8-4f12-4f77-b1ec-ddef51e05823\",\"moduleSequenceNumber\":288},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///8322b383-b91f-4add-93f1-84308f940572\",\"moduleSequenceNumber\":381}],\"dependents\":[],\"ramUsage\":5,\"server\":\"neo-net\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"5.8.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":57.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",24],\"dataMap\":{\"the-hub\":[0,24,24,1464]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":85.41414945475616,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.38,\"onlineExpGained\":59259.37628606432,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.20999979995,\"pid\":14,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":24,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///21dd62fa-d18d-4c21-ae11-d770cc1ce5fa\",\"moduleSequenceNumber\":294},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///536dfe53-694d-46bf-ba1d-645ae76d1d86\",\"moduleSequenceNumber\":293},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///3cb0007f-a3b2-4102-aa2d-a2a27a4bf908\",\"moduleSequenceNumber\":1327}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"silver-helix\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"silver-helix\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///1ffff0e8-2fa5-4459-812c-9991f72b4140\",\"moduleSequenceNumber\":376}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///3b809d29-37f0-451f-b9ce-e268eaf3594d\",\"moduleSequenceNumber\":294},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///ba524a73-24b9-40e9-bd1a-355ab841a7a8\",\"moduleSequenceNumber\":385}],\"dependents\":[],\"ramUsage\":5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"63.0.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":9.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{\"the-hub\":[0,4,4,244]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14.236127859903718,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.386,\"onlineExpGained\":9876.562714344065,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.40999979994,\"pid\":15,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":4,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///d7c2d962-d3c9-4979-9b71-1dbe9daacbcf\",\"moduleSequenceNumber\":205309}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///8abcacd0-8a9f-419b-a71e-4a3e632c489c\",\"moduleSequenceNumber\":300},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///2ef1e1e9-2198-46cb-8bee-b65febec935d\",\"moduleSequenceNumber\":299},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///ee96d586-dc5a-40e5-a330-a74695c55fb2\",\"moduleSequenceNumber\":1318}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///e8313220-e398-45b8-8ae2-80c14670a2f0\",\"moduleSequenceNumber\":377}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///8a93f312-5ff5-49e7-83d4-6a944d0e20c6\",\"moduleSequenceNumber\":300},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///25e56f7b-12a9-4e65-b08f-2247bae6c96d\",\"moduleSequenceNumber\":367}],\"dependents\":[],\"ramUsage\":5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"37.9.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":9.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{\"the-hub\":[0,4,4,244]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14.236357011637738,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.38899999999998,\"onlineExpGained\":9876.562714344065,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.40999979994,\"pid\":16,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":4,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///0b647aa3-1c7a-4ef7-98c6-7c33e29ce7dc\",\"moduleSequenceNumber\":205310}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///119b37a9-b969-4e23-88c2-aac4f09c36fe\",\"moduleSequenceNumber\":306},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///92278512-fb4e-4e7c-beca-34a2f5ee90ce\",\"moduleSequenceNumber\":305},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///1a360c0e-e987-4d86-a33c-a41df831dcb6\",\"moduleSequenceNumber\":1319}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///f8f2b16c-1b5d-43e8-ad70-0b6b4fcabdff\",\"moduleSequenceNumber\":378}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///e5fb5c54-4be8-4aa7-8b64-ff325953f9e9\",\"moduleSequenceNumber\":306},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///a0b513f3-222f-44d9-8dc3-01422eb03176\",\"moduleSequenceNumber\":368}],\"dependents\":[],\"ramUsage\":5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"94.5.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,11,66,627]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.93704486293559,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.393,\"onlineExpGained\":27705.93998381253,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.20999979995,\"pid\":17,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":11,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///bac6b281-808d-422e-9080-d12a1fd0e099\",\"moduleSequenceNumber\":312},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///0d4ebd38-4138-4888-a389-58e5c1edc056\",\"moduleSequenceNumber\":311},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///de7eab34-c529-4d8a-ba57-bb48cab5ea24\",\"moduleSequenceNumber\":1328}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"phantasy\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"phantasy\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///5afa6aab-bd09-4cfb-873f-0bf6cb263711\",\"moduleSequenceNumber\":379}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///e059bec4-86d1-43d2-a563-eb68c1130b66\",\"moduleSequenceNumber\":312},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///6722b586-75a1-4a6c-b09a-c96a42d72e80\",\"moduleSequenceNumber\":387}],\"dependents\":[],\"ramUsage\":5,\"server\":\"phantasy\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"67.8.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,22,44,649]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.938759055533104,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.40099999999998,\"onlineExpGained\":27705.939983812525,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.20999979995,\"pid\":18,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":11,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///00c87471-e888-4d01-b387-ee5a94ebdcd5\",\"moduleSequenceNumber\":205315}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///469c2845-b4ac-4522-bd57-e6b6ea6c8cbf\",\"moduleSequenceNumber\":318},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///d0cb8ece-ee7b-4ce3-a90c-8c62dd3f8586\",\"moduleSequenceNumber\":317},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///c0064031-4b02-43fe-8132-4ecf5edeaa57\",\"moduleSequenceNumber\":1322}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"max-hardware\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"max-hardware\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///736586e1-6ada-4318-a07a-bff7fa661f7c\",\"moduleSequenceNumber\":380}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///a2f79960-48c1-457a-8031-b36b27949950\",\"moduleSequenceNumber\":318},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///2f4245c1-da91-49a4-847c-68a9b8e85487\",\"moduleSequenceNumber\":372}],\"dependents\":[],\"ramUsage\":5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-122154.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,7,3,3,0,0,9,4,5,2,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"85.7.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,0,11,671]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.154243459781604,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.409,\"onlineExpGained\":27160.54746444614,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.20999979995,\"pid\":19,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":11,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///4ea2a38d-d9d9-4015-a709-9a33e7a9861d\",\"moduleSequenceNumber\":324},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///35192d34-b55a-48d0-8bce-c36240d58385\",\"moduleSequenceNumber\":323},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///6be15a21-700e-4fd9-a410-0ceefe33d4ed\",\"moduleSequenceNumber\":1326}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"omega-net\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"omega-net\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///6c817ab2-9bfa-4924-a9a0-8295df2d764b\",\"moduleSequenceNumber\":381}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///6132ebab-56b7-45f4-bed3-e28ba92363a3\",\"moduleSequenceNumber\":324},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///41759924-8396-420d-9c93-b8025025b12f\",\"moduleSequenceNumber\":382}],\"dependents\":[],\"ramUsage\":5,\"server\":\"omega-net\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"comptek\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":60663001,\"moneyMax\":1516575025,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":196,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"35.6.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":42572298,\"moneyMax\":1064307450,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":225,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"67.0.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":26.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",11],\"dataMap\":{\"the-hub\":[0,11,11,671]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":39.154813064395974,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.41199999999998,\"onlineExpGained\":27160.54746444614,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.40999979994,\"pid\":20,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":11,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///b79bd6a8-2154-4c7f-a0c8-36fc360c75b4\",\"moduleSequenceNumber\":205312}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///37385696-9029-4bd0-bd1d-8e9619a3bc2b\",\"moduleSequenceNumber\":336},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///5eaa2095-7f95-46e2-beed-e307eb2c9fc2\",\"moduleSequenceNumber\":335},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///6c7e3ee9-fad6-40e6-a7dd-b39c44e88fc3\",\"moduleSequenceNumber\":1320}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"iron-gym\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"iron-gym\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///12c6ae78-d33c-4dfa-a1a8-580268fea6a1\",\"moduleSequenceNumber\":382}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///08dff070-5eb7-4294-a7b9-7b9d7de39ee6\",\"moduleSequenceNumber\":336},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///46d2aece-39df-42f2-953a-22868c84c801\",\"moduleSequenceNumber\":369}],\"dependents\":[],\"ramUsage\":5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":78.17199999999998,\"minDifficulty\":10,\"moneyAvailable\":5184458.595177022,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"82.6.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":476,\"serverGrowth\":35}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"60.9.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1014,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"69.0.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":736,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"5.4.8.6\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-210353-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[93,101,27,171,182,35,8,60,46,199,101,32,74,136,126,61,64,191,133,192,135,196,137,66,35,4,47,67,38,110,155,196,9,17,120,18,107,7,108,96,12,64,70,189,56,70,194]],\"reward\":{\"name\":\"MegaCorp\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-766843.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[100,131,60,78,80,148,45,73,186,111,23,51,125,129,4,19,137,115,147,118,124,98,196,74,45,23,89,122,35,89,161,157,171,156,7,105,12,108,80,89,137,179,189,81,160,176,171,193,69,24],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"43.0.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":122.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",51],\"dataMap\":{\"the-hub\":[0,153,459,2856]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":191.74852856810318,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.417,\"onlineExpGained\":133006.36113202496,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.00999979994,\"pid\":21,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":51,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///6566a0a0-c4e8-4ce6-84bd-db33b374d77e\",\"moduleSequenceNumber\":342},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///a2dbb8f3-b1a0-4649-bb17-6045af4914fe\",\"moduleSequenceNumber\":341},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///f285a8ac-b4ee-4421-8c91-138ae5e9d293\",\"moduleSequenceNumber\":1333}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///069ae050-967e-4be9-9a04-880653f685d0\",\"moduleSequenceNumber\":383}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///2cdea295-9c5d-4f14-afd7-dafe16a6eb36\",\"moduleSequenceNumber\":342},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///f300510f-f45a-4ef5-bcde-671c0c5dc161\",\"moduleSequenceNumber\":397}],\"dependents\":[],\"ramUsage\":5,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":348,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"34.5.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":122.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",51],\"dataMap\":{\"the-hub\":[0,102,255,3060]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":191.75367184406835,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.422,\"onlineExpGained\":133006.36113202496,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.00999979994,\"pid\":22,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":51,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///9f93f5e8-4969-4325-865f-9ee5931c5921\",\"moduleSequenceNumber\":348},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///cdd45289-23b5-4c75-ac68-e5e1281c3b31\",\"moduleSequenceNumber\":347},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///ba7cf836-c5c1-4198-a475-b0b85f49fee3\",\"moduleSequenceNumber\":1331}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///fc1b757e-7a99-4208-ae75-4103fdb975ca\",\"moduleSequenceNumber\":384}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///c0666106-865e-46ef-a9ce-b987cab9e645\",\"moduleSequenceNumber\":348},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///f69ad513-8c25-40b1-a1ab-5aaa551698d8\",\"moduleSequenceNumber\":394}],\"dependents\":[],\"ramUsage\":5,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"88.7.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"75.0.9.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",1],\"dataMap\":{\"the-hub\":[0,1,1,61]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3.55983950230204,\"offlineMoneyMade\":0,\"offlineRunningTime\":186.428,\"onlineExpGained\":2469.1406785860163,\"onlineMoneyMade\":0,\"onlineRunningTime\":129457.20999979995,\"pid\":23,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///8a560ba5-342e-44ed-851b-11d380b59c18\",\"moduleSequenceNumber\":205317}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///b1bbb632-2ca5-4699-959b-2e1f24dfe99c\",\"moduleSequenceNumber\":354},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///6cda0b2c-e4cf-4bac-829c-a69be0803701\",\"moduleSequenceNumber\":353},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///46dbd9e7-e116-4765-82d5-82437f8e42ef\",\"moduleSequenceNumber\":1324}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"CSEC\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"CSEC\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///f7901e3c-25ca-4cbb-848a-ca10d97ad941\",\"moduleSequenceNumber\":385}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///333c42b1-b8ae-432e-9225-5a6f09e5a977\",\"moduleSequenceNumber\":354},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///91deb0cd-e60f-4ffe-9c76-fad266480b5e\",\"moduleSequenceNumber\":379}],\"dependents\":[],\"ramUsage\":5,\"server\":\"CSEC\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"74.0.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"65.5.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"67.6.7.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"darkweb\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"darkweb\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [...TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"darkweb\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":156.4905,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.9832,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0477,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0347,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.03,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":190.0924,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":2427143.2295660865}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1.233606076139962}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":193.547,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":254907.21350274177}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":128.7774,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":297006.96213174355}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":82.7632,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":241.0427,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":443999.2119656217}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":198.3819,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":451893.0312859546}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":179.8562,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":242864.65068828617}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":163.1453,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":228469.00276299374}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":28976.057469038493,\"lastPrice\":29030.131546404213,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":21.521143824597196,\"otlkMagForecast\":28.393889981042935,\"cap\":97359516,\"spreadPerc\":0.5,\"shareTxForMovement\":84034,\"shareTxUntilMovement\":84034,\"totalShares\":125500000,\"maxShares\":25100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":104216.23504410157,\"lastPrice\":104434.43727089484,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":false,\"otlkMag\":20.98104137279697,\"otlkMagForecast\":29.35932610840845,\"cap\":457512571,\"spreadPerc\":0.4,\"shareTxForMovement\":42636,\"shareTxUntilMovement\":42636,\"totalShares\":80700000,\"maxShares\":16100000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":31149.648081970172,\"lastPrice\":31255.98409551737,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":11.241416826503382,\"otlkMagForecast\":40.29958709460712,\"cap\":376421360,\"spreadPerc\":0.4,\"shareTxForMovement\":43381,\"shareTxUntilMovement\":43381,\"totalShares\":89600000,\"maxShares\":17900000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":60630.54375737625,\"lastPrice\":60437.98026687567,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":15.264703355744862,\"otlkMagForecast\":35.667554759495474,\"cap\":392845549,\"spreadPerc\":0.5,\"shareTxForMovement\":64205,\"shareTxUntilMovement\":64205,\"totalShares\":64200000,\"maxShares\":12800000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":25432.450673374668,\"lastPrice\":25355.128050405197,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":9.252322169188888,\"otlkMagForecast\":58.56513638395729,\"cap\":718977073,\"spreadPerc\":0.2,\"shareTxForMovement\":37555,\"shareTxUntilMovement\":37555,\"totalShares\":50200000,\"maxShares\":10000000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":75239.33236248743,\"lastPrice\":75605.76544660784,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":false,\"otlkMag\":17.129890769368906,\"otlkMagForecast\":33.56132542034918,\"cap\":268515174,\"spreadPerc\":0.7,\"shareTxForMovement\":47388,\"shareTxUntilMovement\":47388,\"totalShares\":28400000,\"maxShares\":5700000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":38218.38070488127,\"lastPrice\":38088.35791513429,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":10.831003824917598,\"otlkMagForecast\":61.41717710548585,\"cap\":147807689,\"spreadPerc\":0.2,\"shareTxForMovement\":36051,\"shareTxUntilMovement\":36051,\"totalShares\":82400000,\"maxShares\":16500000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":86141.10484391134,\"lastPrice\":86619.44433309419,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":7.6155227764457285,\"otlkMagForecast\":40.48185627410982,\"cap\":236432567,\"spreadPerc\":0.6,\"shareTxForMovement\":55869,\"shareTxUntilMovement\":55869,\"totalShares\":64200000,\"maxShares\":12800000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":6209.92106593734,\"lastPrice\":6184.58617019609,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":8.361692363990429,\"otlkMagForecast\":58.301900296873455,\"cap\":138195002,\"spreadPerc\":0.7,\"shareTxForMovement\":59976,\"shareTxUntilMovement\":59976,\"totalShares\":50200000,\"maxShares\":10000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":29749.654087913725,\"lastPrice\":29655.168753009293,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":9.408932380458827,\"otlkMagForecast\":59.14594071365298,\"cap\":343511903,\"spreadPerc\":0.7,\"shareTxForMovement\":36546,\"shareTxUntilMovement\":36546,\"totalShares\":53400000,\"maxShares\":10700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":28050.10036018205,\"lastPrice\":27974.974807027873,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":9.04575738004646,\"otlkMagForecast\":62.19633071217872,\"cap\":53768814,\"spreadPerc\":0.6,\"shareTxForMovement\":60055,\"shareTxUntilMovement\":60055,\"totalShares\":66800000,\"maxShares\":13400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":3043.7519247873415,\"lastPrice\":3033.534378640164,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":6.351941964957893,\"otlkMagForecast\":57.06358633346223,\"cap\":229259342,\"spreadPerc\":0.7,\"shareTxForMovement\":69454,\"shareTxUntilMovement\":69454,\"totalShares\":90000000,\"maxShares\":18000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":18992.02023494248,\"lastPrice\":18935.137774690167,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":5.172283433869967,\"otlkMagForecast\":55.76262533456146,\"cap\":312118830,\"spreadPerc\":0.5,\"shareTxForMovement\":37303,\"shareTxUntilMovement\":37303,\"totalShares\":47100000,\"maxShares\":9400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":45417.06929287496,\"lastPrice\":45309.82807806065,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":true,\"otlkMag\":11.136659435564438,\"otlkMagForecast\":61.39695652540353,\"cap\":81958362,\"spreadPerc\":0.8,\"shareTxForMovement\":79102,\"shareTxUntilMovement\":79102,\"totalShares\":42900000,\"maxShares\":8600000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":23884.9760018563,\"lastPrice\":23953.466657834833,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":7.009694150136541,\"otlkMagForecast\":43.19253888595641,\"cap\":221475713,\"spreadPerc\":0.6,\"shareTxForMovement\":56862,\"shareTxUntilMovement\":56862,\"totalShares\":37700000,\"maxShares\":7500000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":12762.956774361335,\"lastPrice\":12804.20218332097,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.8445020277468025,\"otlkMagForecast\":45.5015795132794,\"cap\":143466472,\"spreadPerc\":1,\"shareTxForMovement\":56264,\"shareTxUntilMovement\":56264,\"totalShares\":58600000,\"maxShares\":11700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":18215.11825870499,\"lastPrice\":18277.299476830616,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":8.889874651535557,\"otlkMagForecast\":57.68066554514983,\"cap\":47824176,\"spreadPerc\":1.1,\"shareTxForMovement\":125186,\"shareTxUntilMovement\":125186,\"totalShares\":44800000,\"maxShares\":9000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":23416.775410678296,\"lastPrice\":23357.239977645037,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":9.697155369683932,\"otlkMagForecast\":39.10440678413375,\"cap\":290025384,\"spreadPerc\":0.7,\"shareTxForMovement\":121579,\"shareTxUntilMovement\":121579,\"totalShares\":26900000,\"maxShares\":5400000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":17083.42662181711,\"lastPrice\":17141.74456749373,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":2.6761607868879884,\"otlkMagForecast\":54.29477530878103,\"cap\":210673605,\"spreadPerc\":1,\"shareTxForMovement\":65711,\"shareTxUntilMovement\":65711,\"totalShares\":23000000,\"maxShares\":4600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4585.9937161238395,\"lastPrice\":4640.26533423731,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":false,\"otlkMag\":6.863687673466904,\"otlkMagForecast\":45.21178597666346,\"cap\":164925211,\"spreadPerc\":0.8,\"shareTxForMovement\":18221,\"shareTxUntilMovement\":18221,\"totalShares\":55400000,\"maxShares\":11100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":2851.621016016656,\"lastPrice\":2867.455999125082,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":7.3288019203424115,\"otlkMagForecast\":42.715708418918666,\"cap\":117820969,\"spreadPerc\":1,\"shareTxForMovement\":79060,\"shareTxUntilMovement\":79060,\"totalShares\":57800000,\"maxShares\":11600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2627.6496348962846,\"lastPrice\":2619.779636124959,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":5.92653277873953,\"otlkMagForecast\":43.380280305653585,\"cap\":48144689,\"spreadPerc\":1,\"shareTxForMovement\":70339,\"shareTxUntilMovement\":70339,\"totalShares\":70200000,\"maxShares\":14000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":44024.09385470051,\"lastPrice\":44404.81762590175,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.9,\"b\":true,\"otlkMag\":9.041499580164793,\"otlkMagForecast\":61.631981078929584,\"cap\":165202238,\"spreadPerc\":0.7,\"shareTxForMovement\":89777,\"shareTxUntilMovement\":89777,\"totalShares\":35700000,\"maxShares\":7100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":7544.683233113848,\"lastPrice\":7601.001700218375,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":false,\"otlkMag\":10.050162788509232,\"otlkMagForecast\":37.82627511664844,\"cap\":154146385,\"spreadPerc\":1.2,\"shareTxForMovement\":38459,\"shareTxUntilMovement\":38459,\"totalShares\":25300000,\"maxShares\":5100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3868.6070079029655,\"lastPrice\":3882.6937501520765,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":5.121253614363384,\"otlkMagForecast\":54.4911650741302,\"cap\":46582821,\"spreadPerc\":0.6,\"shareTxForMovement\":86918,\"shareTxUntilMovement\":86918,\"totalShares\":90800000,\"maxShares\":18200000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1589.195832218458,\"lastPrice\":1572.2355944178018,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.37,\"b\":false,\"otlkMag\":8.425519581383734,\"otlkMagForecast\":41.294882773847334,\"cap\":14773251,\"spreadPerc\":1.3,\"shareTxForMovement\":34383,\"shareTxUntilMovement\":34383,\"totalShares\":25500000,\"maxShares\":5100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3329.951122240002,\"lastPrice\":3343.8952596323766,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.92,\"b\":true,\"otlkMag\":5.200236537066834,\"otlkMagForecast\":54.54661659790865,\"cap\":18356578,\"spreadPerc\":0.8,\"shareTxForMovement\":88058,\"shareTxUntilMovement\":88058,\"totalShares\":31200000,\"maxShares\":6200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3755.7637059364306,\"lastPrice\":3768.071967708539,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.483424002962279,\"otlkMagForecast\":54.347502189560096,\"cap\":16439829,\"spreadPerc\":0.6,\"shareTxForMovement\":178231,\"shareTxUntilMovement\":178231,\"totalShares\":11900000,\"maxShares\":2400000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3415.0240616487017,\"lastPrice\":3380.5571581113886,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.24,\"b\":false,\"otlkMag\":10.201180883483282,\"otlkMagForecast\":41.08319098061282,\"cap\":59789565,\"spreadPerc\":1.4,\"shareTxForMovement\":32107,\"shareTxUntilMovement\":32107,\"totalShares\":10800000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":488.9648545339378,\"lastPrice\":484.33538256476686,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.1,\"b\":true,\"otlkMag\":1.4717458235031553,\"otlkMagForecast\":51.44049831457359,\"cap\":6428135,\"spreadPerc\":1.4,\"shareTxForMovement\":22611,\"shareTxUntilMovement\":22611,\"totalShares\":47800000,\"maxShares\":9600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":2783.4226593040394,\"lastPrice\":2763.4235549526206,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.59,\"b\":true,\"otlkMag\":17.49737186347716,\"otlkMagForecast\":71.19449865020225,\"cap\":27776430,\"spreadPerc\":0.6,\"shareTxForMovement\":67524,\"shareTxUntilMovement\":67524,\"totalShares\":88900000,\"maxShares\":17800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":53621.35185806004,\"lastPrice\":53814.162418583815,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.592725608414948,\"otlkMagForecast\":54.6361611765045,\"cap\":454235794,\"spreadPerc\":0.4,\"shareTxForMovement\":184746,\"shareTxUntilMovement\":184746,\"totalShares\":19000000,\"maxShares\":3800000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":48660.1653263766,\"lastPrice\":48781.980737887556,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":11.142275506213993,\"otlkMagForecast\":38.97190486022923,\"cap\":519748741,\"spreadPerc\":0.7,\"shareTxForMovement\":106258,\"shareTxUntilMovement\":106258,\"totalShares\":19400000,\"maxShares\":3900000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":499361,\"lastUpdate\":1645600643852,\"ticksUntilCycle\":36}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"de\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2,\"y\":2,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1645600644703","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1645600644716"}}