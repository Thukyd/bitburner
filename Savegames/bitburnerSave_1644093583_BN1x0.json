{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":239,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":2,\"dexterity\":2,\"agility\":2,\"charisma\":4,\"intelligence\":0,\"hacking_chance_mult\":1.0201,\"hacking_speed_mult\":1.06121003,\"hacking_money_mult\":1.0201,\"hacking_grow_mult\":1.0201,\"hacking_exp\":401478.78047561925,\"strength_exp\":30.72949240000098,\"defense_exp\":30.72949240000098,\"dexterity_exp\":30.72949240000098,\"agility_exp\":30.72949240000098,\"charisma_exp\":61.45898480000196,\"intelligence_exp\":0,\"hacking_mult\":1.12466025,\"strength_mult\":1.0201,\"defense_mult\":1.0201,\"dexterity_mult\":1.0201,\"agility_mult\":1.0201,\"charisma_mult\":1.0201,\"hacking_exp_mult\":1.0201,\"strength_exp_mult\":1.0201,\"defense_exp_mult\":1.0201,\"dexterity_exp_mult\":1.0201,\"agility_exp_mult\":1.0201,\"charisma_exp_mult\":1.0201,\"company_rep_mult\":1.0201,\"faction_rep_mult\":1.0201,\"money\":16849824.156755924,\"city\":\"Aevum\",\"location\":\"Aevum Police Headquarters\",\"jobs\":{\"FoodNStuff\":\"Employee\"},\"companyName\":\"FoodNStuff\",\"currentServer\":\"CSEC\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":23595.832767656077,\"onlineTimeSeconds\":34879.200000039426,\"ram\":64,\"totalMoneyGenerated\":600100264.737388,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":23595.832767656077,\"onlineTimeSeconds\":34355.40000004912,\"ram\":64,\"totalMoneyGenerated\":550830953.1593987,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":23595.832767656077,\"onlineTimeSeconds\":31947.800000065996,\"ram\":64,\"totalMoneyGenerated\":538527475.4478241,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":23595.832767656077,\"onlineTimeSeconds\":31853.40000006565,\"ram\":64,\"totalMoneyGenerated\":499583906.57285553,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":23595.832767656077,\"onlineTimeSeconds\":31823.80000006554,\"ram\":64,\"totalMoneyGenerated\":487876397.2707473,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":23595.832767656077,\"onlineTimeSeconds\":29174.2000000582,\"ram\":64,\"totalMoneyGenerated\":445504552.2812733,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":22472.221683481977,\"onlineTimeSeconds\":26917.00000004997,\"ram\":64,\"totalMoneyGenerated\":107726596.75693887,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":22472.221683481977,\"onlineTimeSeconds\":4665.799999998183,\"ram\":64,\"totalMoneyGenerated\":91042565.50859286,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":22472.221683481977,\"onlineTimeSeconds\":4604.199999998239,\"ram\":64,\"totalMoneyGenerated\":88561473.19146033,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":22472.221683481977,\"onlineTimeSeconds\":2633.6000000000304,\"ram\":64,\"totalMoneyGenerated\":36567958.823806174,\"name\":\"hacknet-node-9\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\",\"CyberSec\",\"Aevum\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.0201,\"crime_success_mult\":1.0201,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.15301499999999998,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.3583759795172308,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":2173.0272209997615,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":5051.182275297894,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":3550000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.0201,\"hacknet_node_money_mult\":2.572787834375,\"hacknet_node_purchase_cost_mult\":0.7497765,\"hacknet_node_ram_cost_mult\":0.9801,\"hacknet_node_core_cost_mult\":0.9801,\"hacknet_node_level_cost_mult\":0.833085,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644093582635,\"totalPlaytime\":291603800,\"playtimeSinceLastAug\":35030600,\"playtimeSinceLastBitnode\":291603800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":59581738.42230718,\"hacknet\":3446322143.7347293,\"hacknet_expenses\":-3489696271.7882423,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":15849824.156754836,\"work\":42213.77819999988,\"servers\":0,\"other\":-400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":219459338.28381237,\"hacknet\":6797975940.633878,\"hacknet_expenses\":-5404094701.240165,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":356650956.3267223,\"work\":3487283.346299698,\"servers\":-464989959.7224816,\"other\":-1000000,\"augmentations\":-794186945}},\"scriptProdSinceLastAug\":59415846,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1643885384244},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1643894920823},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1643900797590},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1643906299108},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643911675318},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1643924584948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1643960666103},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643963802896},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643998639673},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644042685265},{\"ID\":\"TOR\",\"unlockedOn\":1644053943665}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"28.9.0.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\"],\"ramUsed\":506.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",211],\"dataMap\":{\"iron-gym\":[0,0,2321,0]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28271.868900000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":5019.40999999786,\"pid\":14,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":211,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/288c3dd3-0686-4827-958c-177902b15d09\",\"moduleSequenceNumber\":40981}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO use threats\\n * TODO use host as param\\n * TODO write script to run this script with list of servers\\n */\\n\\n/** \\n * \\ttryToHack\\n * \\t@params \\n * \\t\\thost: string => \\n * \\t\\tnas: Netscript API \\n * \\n * \\t- attemps to hack server \\n * \\t\\n * \\treturns bool\\n * \\t\\t\\\"true\\\" for success\\n * \\t\\t\\\"false\\\" for failure \\n * \\n **/\\nexport async function tryToHack(ns, host) {\\n\\tlet result = await ns.hack(host);\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * weakenHost\\n * \\t- weakens host till minimum Security level is reached\\n * \\t\\thttps://bitburner.readthedocs.io/en/latest/netscript/basicfunctions/weaken.html\\n */\\nexport async function weakenSecurityLevel(ns, host) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(host); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(host); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(host)\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(host);\\n\\t\\tns.print(`${host}'s security level is ${currentLvl} of min ${minLvl}`)\\n\\t}\\n\\n\\n\\n}\\n\\n\\n// TODO:: Thread param + move to it's own hack folder!\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tlet host = ns.args[0];\\n\\n\\tlet threads = 1\\n\\t(ns.args[1]) ? threads = ns.args[1] : ns.tprint(`INFO: No threads as param => default = 1`);\\n\\n\\t// try rerun the hack until it fails\\n\\twhile (ns.getServerMoneyAvailable(host) > 0) {\\n\\t\\tlet hackSuccess = await tryToHack(ns, host);\\n\\n\\t\\t// weaken to the lowest security level again\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`INFO: hacking ${host} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, host);\\n\\t\\t}\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"/hack_network/home/hack_me.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack_network/hack_me.js\",\"url\":\"blob:https://danielyxie.github.io/0c960d23-bd03-4e8f-859a-082f018c582e\",\"moduleSequenceNumber\":45}],\"dependents\":[],\"ramUsage\":2.15,\"server\":\"home\",\"moduleSequenceNumber\":86,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet servers = ns.scan();\\n\\n\\tfor (let server of servers) {\\n\\t\\tns.killall(server)\\n\\t\\tns.tprint(`INFO: killed all scripts on ${server}`)\\n\\t}\\n}\",\"filename\":\"/kill_scripts/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/kill_scripts/main.js\",\"url\":\"blob:https://danielyxie.github.io/6aebf27f-cb36-4c09-8309-a71dbb78230b\",\"moduleSequenceNumber\":3009}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":87,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US')}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.2; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.5; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${HOST}`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/f2bbb7f0-189c-4140-8bb4-1be1b38f22d5\",\"moduleSequenceNumber\":7819}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":7819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"att_network_themselves.js\",\"url\":\"blob:https://danielyxie.github.io/3efbd5e7-136d-4c20-9118-aa932aed170c\",\"moduleSequenceNumber\":7725}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":7725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tns.getServerRequiredHackingLevel(\\\"home\\\")\\n\\n}\",\"filename\":\"/test/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/test/test.js\",\"url\":\"blob:https://danielyxie.github.io/6e17554f-a8e4-4fee-9e83-6807c54768cc\",\"moduleSequenceNumber\":21417}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":90,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/ca22768a-ef50-4dcd-b64b-a9d72fed3343\",\"moduleSequenceNumber\":114933}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":91,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n// TODO: Recursive with Hash Function - this is supposed to be the best\\n\\n\\nimport {getRoot as ROOT} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts as COPY_TO_TARGET} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns \\n * \\t@param {[string]} knownConnections\\n * \\t@param {[string]} scannedConnections\\n **/\\nexport async function filterNewConnections(ns, knownConnections, scannedConnections){\\n\\t// only consider new connections\\n\\t\\t// => get unique connections from scanned and know connections\\n\\tlet uniqueConnectins = knownConnections.filter((obj) => scannedConnections.indexOf(obj) == -1);\\n\\treturn;\\n}\\n\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// TODO RECURSION\\n\\t\\t/*\\n\\t\\t1. check for optional args => array with server names\\n\\t\\t2. after scanning check with connections - filter down to only new\\n\\t\\t\\tconnections in array\\n\\t\\t3. inside the recurstion call, pass the \\\"connections array\\\"\\n\\t\\t*/ \\n\\n\\tlet newConnections = ns.scan(); // get connected servers\\n\\t// Recursion: \\n\\t\\t// Received known connections?\\n\\t\\t// filter down so only new ones will be considered again \\n\\n\\t// FIXME => You can't pass arrays as args, but you could attach them to the script as string each\\n\\tif(ns.args[0]) {\\n\\t\\tlet knownConnections = ns.args[0]\\n\\t\\tnewConnections = filterNewConnections(ns, knownConnections, newConnections);\\n\\t}\\n\\n\\tns.tprint(\\\"ERROR: TEST!\\\");\\n\\tns.tprint(newConnections);\\n\\n\\tfor (let targetServer of newConnections) {\\n\\t\\tlet rooted = await ROOT(ns, targetServer);\\n\\t\\tif (rooted) {\\n\\t\\t\\t// copy relevant scripts to new server\\n\\t\\t\\tawait COPY_TO_TARGET(ns, targetServer);\\n\\t\\t\\t// Recursion: call target server to run this script again \\n\\t// FIXME\\n\\t\\t\\t//ns.exec(\\\"spread-root.js\\\", targetServer, 1, newConnections);\\n\\t\\t}else{ // root not succesful skip this one\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spread-root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/1ab03e83-82d8-4710-9a7f-943052b638a4\",\"moduleSequenceNumber\":91},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/57672c41-bbca-4f92-950f-6df78f39d387\",\"moduleSequenceNumber\":99},{\"filename\":\"spread-root.js\",\"url\":\"blob:https://danielyxie.github.io/a80440fc-c857-4165-ba28-7fcd0ec0219e\",\"moduleSequenceNumber\":5679}],\"dependents\":[],\"ramUsage\":5,\"server\":\"home\",\"moduleSequenceNumber\":6024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\t// TODO enable for production!\\n\\t//ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\t//ns.disableLog(\\\"sleep\\\");\\n\\n\\t/// TODO: add this to calculate the threas of of \\\"att_neighbour\\\"\\n\\n\\n\\t////////////////\\n\\t/// TEST - TODO delete for PROD\\n\\tawait orchestrateCluster(ns);\\n\\treturn \\n\\t////////////////\\n\\t\\n\\t\\n\\tfor (let i = 0; i < 10; i++){ // exchange with while or something else later\\n\\n\\t\\tns.tprint(`Info: Iteration ${i} of 10`)\\n\\t\\tns.tprint(\\\"Sleeping for 3000\\\")\\n\\t\\tawait ns.sleep(3000);\\n\\t}\\n\\n}\",\"filename\":\"/2_hacknet/main_hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":93,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function test (ns) {\\n\\tlet numNodes = ns.hacknet.numNodes()\\n\\tns.tprint(numNodes)\\n\\tlet stuff = ns.hacknet.maxNumNodes()\\n\\tns.tprint(stuff)\\n\\n\\tlet mults = ns.getHacknetMultipliers();\\n\\tns.tprint(mults.production);\\n\\tns.tprint(mults.purchaseCost);\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst ORCHESTRATE = ns.hacknet;\\n\\tlet MONEY = ns.getPlayer().money;\\n\\tlet PRINT_MONEY = MONEY.toLocaleString('en-US')\\n\\n\\t// TODO Is there max amount of nodes? If yes, add it to logic.\\n\\t// let stuff = ns.hacknet.maxNumNodes()\\n\\n/////////////////////////////////////////////////\\t\\n////////// TEST\\n\\tns.tprint(`INFO: ORCHESTRATE: Money: ${PRINT_MONEY}`)\\n\\tlet nodeCount = ORCHESTRATE.numNodes()\\n/////////////////////////////////////////////////\\n\\n\\t// cluster stats\\n\\tlet cluster = []\\n\\tfor (let i = 0; i < nodeCount; i++) {\\n\\t\\tlet singleNode = ORCHESTRATE.getNodeStats(i);\\n\\t\\tcluster.push(singleNode)\\n\\t}\\n\\n\\t////////////\\n\\t// A) purchase 6 nodes\\n\\tif(nodeCount <= 6) {\\n\\t\\tif (MONEY < ORCHESTRATE.getPurchaseNodeCost){\\n\\t\\t\\treturn `ERROR: ${PRINT_MONEY} is not enough to buy a node.`\\n\\t\\t}\\n\\t\\tlet nodeNum = ORCHESTRATE.purchaseNode()\\n\\t\\treturn `INFO: purchased hacknet-node-${nodeNum}`\\n\\t}\\n\\n\\n\\n\\t// create a seperate \\n\\tlet clusterOperations = [...cluster]; // create seperate array\\n\\n\\t// a) 6 nodes up to level 100\\n\\t\\n\\n\\t// b) upgrade 6 nodes and upgrade ram to 64gb\\n\\n\\t// c) upgrade 6 nodes to  4 cores\\n\\n\\t// d) buy rest of nodes and upgrade them the same\\n\\n\\t// => cores should be last\\n\\n\\n\\t// f) tbd.... \\n\\t\\n}\",\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"blob:https://danielyxie.github.io/fcea95ce-76e5-4759-b0a5-2ed1664547b1\",\"moduleSequenceNumber\":16384}],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"moduleSequenceNumber\":94,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as ORCHESTRATOR from \\\"2_hacknet/orchestrate_cluster.js\\\" \\n\\n/** @param {NS} ns \\n * **/\\nexport async function main(ns) {\\n\\n\\tlet operationLog = await ORCHESTRATOR.main(ns);\\n\\tns.tprint(operationLog);\\n\\n}\",\"filename\":\"/2_hacknet/test_orchestrate_cluster.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"blob:https://danielyxie.github.io/c3cfb0cd-b3c9-4aa1-9bec-b7716d1730ba\",\"moduleSequenceNumber\":22556},{\"filename\":\"/2_hacknet/test_orchestrate_cluster.js\",\"url\":\"blob:https://danielyxie.github.io/ce8310b4-34fb-4bd4-a3e5-17b682a7e56c\",\"moduleSequenceNumber\":22623}],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"moduleSequenceNumber\":95,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TARGET = \\\"foodnstuff\\\"; //\\\"n00dles\\\"\\n\\n\\t// NS1:\\n\\t//For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n\\tlet growTimes = ns.growthAnalyze(TARGET, 2);\\n\\t//If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n\\n\\tns.tprint(`TEST: ns.growthAnalyze(TARGET, 2) returns ${growTimes}`)\\n\\n\\t////////////////////////////////////\\n\\n\\tlet growth = ns.getServerGrowth(TARGET)\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET)\\n\\tlet availableMoney =ns.getServerMoneyAvailable(TARGET)\\n\\n\\tns.tprint(`INFO: BEFORE Rate = ${growth}, ${availableMoney.toLocaleString('de-DE')} of  ${maxMoney.toLocaleString('de-DE')}`)\\n\\tawait ns.grow(TARGET);\\n\\tgrowth = ns.getServerGrowth(TARGET);\\n\\tavailableMoney =ns.getServerMoneyAvailable(TARGET);\\n\\tns.tprint(`INFO: AFTER Rate = ${growth}, ${availableMoney.toLocaleString('de-DE')} of  ${maxMoney.toLocaleString('de-DE')}`)\\n\\t\\n\\n\\t/////////\\n\\t// a) don't push over omney limit\\n\\t// b) start growth if under certain % of money level\\n\\t// c) estimate how much growth operations to grow until x% of growth\\n\\n\\t// Configuration variables\\n\\tlet min_percentage = 0.5; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\n\\n\\t\\n\\t\\n}\",\"filename\":\"/1_hack/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/test.js\",\"url\":\"blob:https://danielyxie.github.io/bd73d23c-f00a-406e-91e5-f08c8b6b81d4\",\"moduleSequenceNumber\":30778}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":96,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function getNum(ns) {\\n\\tns.tprint(\\\"EXPORT | Here is your Num\\\");\\n\\treturn 1;\\n}\\n\\nexport async function getMap(ns) {\\n\\tns.tprint(\\\"EXPORT | Here is your MAP\\\");\\n\\tlet myMap = new Map;\\n\\tmyMap.set(\\\"Key\\\", \\\"Value\\\")\\n\\treturn myMap\\n}\",\"filename\":\"/test/export.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":97,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as TEST from \\\"test/export.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// NUM\\n\\tlet num = await TEST.getNum(ns);\\n\\tns.tprint(\\\"IMPORT | Here is your Num\\\");\\n\\tns.tprint(num)\\n\\n\\t// MAP\\n\\tlet map = await TEST.getMap(ns);\\n\\tns.tprint(\\\"IMPORT | Here is your Map\\\");\\n\\tns.tprint(map)\\n\\tns.tprint(map.get(\\\"Key\\\"));\\n\\n}\",\"filename\":\"/test/import.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/test/export.js\",\"url\":\"blob:https://danielyxie.github.io/a9c45ddb-a107-4d2f-b5be-dace92b6196d\",\"moduleSequenceNumber\":45668},{\"filename\":\"/test/import.js\",\"url\":\"blob:https://danielyxie.github.io/ee5ef8ee-fd2f-49fd-a93b-2261e4b580ec\",\"moduleSequenceNumber\":46493}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":98,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.brutessh(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.ftpcrack(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.relaysmtp(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.httpworm(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.sqlinject(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// root established already??\\n\\tlet hasRoot = ns.hasRootAccess(target)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${target}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":99,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/hacknet.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"hacknet.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"att_specific.js\",\"url\":\"blob:https://danielyxie.github.io/be96bb6f-a9fe-4293-b650-df7848e39756\",\"moduleSequenceNumber\":7818}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":7818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":7994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"home\",\"moduleSequenceNumber\":7995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"Todo\\n\\nSpread Network\\n- Loop durch die nächsten Netzwerke\\n\\t- Wenn HackSkill zu gering => continue\\n\\t- Wenn Tools zu wenig => continue\\n\\t- Wenn RAM zu gering => continue\\n\\t- Ansonsten root server\\n\\t- scripts draufspielen\\n\\nSpread Self_Attack\\n- Loop durch die nächsten Netzwerke\\n\\t- Wenn Ram zu gering => continue\\n\\t- Wenn nicht Root Server => continue\\n\\t- Start hack dich selbst\\n\\n----------\\nImprove HACK\\n\\n- very important => first grow!!\\n- check if the grow gives information about the efficency \\n\\t\\tgrow: Available money on 'iron-gym' grown by 3.888115%. Gained 2.631k hacking exp (t=216).\\n\\t=> logs give a hint in %; 3.88% is quite low => at this point you can attack again\\n- weaken() only after a couple of tries defiened by chance to crack\\n\\n----\\nWrite Automatic Nodes \\n=> think about optimizing it\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-196414.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[4,4],[9,5,5],[9,1,9,4],[9,4,2,8,2],[6,6,4,8,6,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"73.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":39458203352,\"moneyMax\":986455083800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1127,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"36.7.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55317912555,\"moneyMax\":1382947813875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1348,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"15.5.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":24814784517,\"moneyMax\":620369612925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"75.9.4.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":27083421250,\"moneyMax\":677085531250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1114,\"serverGrowth\":67}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-36853-FoodNStuff.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"25012010720\",\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"95.2.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":39990702364,\"moneyMax\":999767559100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1069,\"serverGrowth\":88}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"82.5.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":23283078469,\"moneyMax\":582076961725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1074,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"79.7.0.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":18695859625,\"moneyMax\":467396490625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1018,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"52.4.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":19264788272,\"moneyMax\":481619706800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1015,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"8.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":21553849495,\"moneyMax\":538846237375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1155,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"65.7.1.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1665176207,\"moneyMax\":41629405175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":954,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"93.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1329,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"68.9.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1004200352,\"moneyMax\":25105008800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":82}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-971983-FoodNStuff.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"547819652\",\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"99.3.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":872731879,\"moneyMax\":21818296975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":883,\"serverGrowth\":47}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-545837.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[143,163,143,174,35,109,106,95,190,148,66,149,22,91,187,65],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"26.5.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":751353149,\"moneyMax\":18783828725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":69}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"71.2.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":696435939,\"moneyMax\":17410898475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"46.9.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":788078125,\"moneyMax\":19701953125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"56.2.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":928576088,\"moneyMax\":23214402200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":905,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"92.1.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1188130412,\"moneyMax\":29703260300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"37.9.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":782042279,\"moneyMax\":19551056975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"1.9.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":518792641,\"moneyMax\":12969816025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":74}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"67.0.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":814924290,\"moneyMax\":20373107250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":950,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"7.7.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":842167193,\"moneyMax\":21054179825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"58.7.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1037174150,\"moneyMax\":25929353750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":885,\"serverGrowth\":63}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"74.4.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":987669294,\"moneyMax\":24691732350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"43.8.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":1057909289,\"moneyMax\":26447732225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"18.4.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":758894572,\"moneyMax\":18972364300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"75.4.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":841933796,\"moneyMax\":21048344900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-521104.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"29.3.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1531312489,\"moneyMax\":38282812225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":51}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"58.0.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1607446413,\"moneyMax\":40186160325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"51.1.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1100482174,\"moneyMax\":27512054350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":783,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"25.5.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1430698160,\"moneyMax\":35767454000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"91.4.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1034818501,\"moneyMax\":25870462525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":79}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"3.4.2.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":780200325,\"moneyMax\":19505008125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":745,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"79.8.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":689752918,\"moneyMax\":17243822950,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":487,\"serverGrowth\":43}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-103310-FoodNStuff.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,-3,-10,3,6,7,-9,-1,-9,-9,-6,4,-10,-5,1,7,1,-5,-10,7,-1,4,-7,-1,3,-2,-1,2,10,8,-9,-9,-4],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"85.5.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":640125627,\"moneyMax\":16003140675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":535,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"81.2.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":215401207,\"moneyMax\":5385030175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":402,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-284803-Netburners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[117,163,188,110,143,74,147,182,156,178],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-687609-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7063732612\",-29],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"96.9.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":176422800,\"moneyMax\":4410570000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":411,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-164349-FoodNStuff.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"98.2.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1009039830,\"moneyMax\":25225995750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":755,\"serverGrowth\":77}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-302992-FoodNStuff.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":596792227,\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"3.9.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":250628378,\"moneyMax\":6265709450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":471,\"serverGrowth\":50}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"53.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":454468920,\"moneyMax\":11361723000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":629,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-806222.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,26],[4,6],[11,17],[16,17],[16,24],[11,19],[21,26],[25,26]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"34.5.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":371480523,\"moneyMax\":9287013075,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":435,\"serverGrowth\":44}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-472710.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[67,45,114,17,27,124,68],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"7.8.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":196836892,\"moneyMax\":4920922300,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":286,\"serverGrowth\":45}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"16.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":227928733,\"moneyMax\":5698218325,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":332,\"serverGrowth\":60}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"30.5.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":379,\"serverGrowth\":69}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"8.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":74916741,\"moneyMax\":1872918525,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":268,\"serverGrowth\":35}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"85.2.3.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1],\"dataMap\":{\"n00dles\":[936612,495,0,28]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1729.880197499988,\"onlineMoneyMade\":936612,\"onlineRunningTime\":5063.20999999782,\"pid\":6,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/5910cafb-49e4-47c5-9cb4-264c9015d29f\",\"moduleSequenceNumber\":128}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US')}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.2; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.5; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${HOST}`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/f8498c41-72ed-433e-8d26-25469d6bb4a2\",\"moduleSequenceNumber\":7726}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":7726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_neighbour.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\", \\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"build_network_1_layer.js\\\",\\n\\t\\t\\t\\\"att_neighbour.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"network_move_scripts.js\\\"\\n\\t\\t];\\n\\t\\tlet result = await ns.scp(files, HOST, server); // returns: true\\n\\t\\t(result) \\n\\t\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${server}\\\"`) \\n\\t\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${server}\\\"`)\\n\\t}\\n}\",\"filename\":\"network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n// TODO: Recursive with Hash Function - this is supposed to be the best\\n\\n\\nimport {getRoot as ROOT} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts as COPY_TO_TARGET} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns \\n * \\t@param {[string]} knownConnections\\n * \\t@param {[string]} scannedConnections\\n **/\\nexport async function filterNewConnections(ns, knownConnections, scannedConnections){\\n\\t// only consider new connections\\n\\t\\t// => get unique connections from scanned and know connections\\n\\tlet uniqueConnectins = knownConnections.filter((obj) => scannedConnections.indexOf(obj) == -1);\\n\\treturn;\\n}\\n\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// TODO RECURSION\\n\\t\\t/*\\n\\t\\t1. check for optional args => array with server names\\n\\t\\t2. after scanning check with connections - filter down to only new\\n\\t\\t\\tconnections in array\\n\\t\\t3. inside the recurstion call, pass the \\\"connections array\\\"\\n\\t\\t*/ \\n\\n\\tlet newConnections = ns.scan(); // get connected servers\\n\\t// Recursion: \\n\\t\\t// Received known connections?\\n\\t\\t// filter down so only new ones will be considered again \\n\\tif(ns.args[0]) {\\n\\t\\tlet knownConnections = ns.args[0]\\n\\t\\tnewConnections = filterNewConnections(ns, knownConnections, newConnections);\\n\\t}\\n\\n\\tns.tprint(\\\"ERROR: TEST!\\\");\\n\\tns.tprint(newConnections);\\n\\n\\tfor (let targetServer of newConnections) {\\n\\t\\tlet rooted = await ROOT(ns, targetServer);\\n\\t\\tif (rooted) {\\n\\t\\t\\t// copy relevant scripts to new server\\n\\t\\t\\tawait COPY_TO_TARGET(ns, targetServer);\\n\\t\\t\\t// Recursion: call target server to run this script again \\n\\t\\t\\tns.exec(\\\"spread-root.js\\\", targetServer, 1, newConnections);\\n\\t\\t}else{ // root not succesful skip this one\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spread-root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"n00dles\",\"moduleSequenceNumber\":5680}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/hacknet.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"hacknet.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.brutessh(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.ftpcrack(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.relaysmtp(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.httpworm(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.sqlinject(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// root established already??\\n\\tlet hasRoot = ns.hasRootAccess(target)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${target}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.008,\"minDifficulty\":1,\"moneyAvailable\":135497.1813401794,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"79.4.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6],\"dataMap\":{\"foodnstuff\":[0,0,1074,0]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6508.762199999984,\"onlineMoneyMade\":0,\"onlineRunningTime\":5063.20999999782,\"pid\":7,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/350b111e-de6c-4461-b592-d00223e75fea\",\"moduleSequenceNumber\":130}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US')}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.2; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.5; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${HOST}`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/09da27f9-2411-4fee-8a24-3d1771402b33\",\"moduleSequenceNumber\":7727}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":7727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_neighbour.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\", \\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"build_network_1_layer.js\\\",\\n\\t\\t\\t\\\"att_neighbour.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"network_move_scripts.js\\\"\\n\\t\\t];\\n\\t\\tlet result = await ns.scp(files, HOST, server); // returns: true\\n\\t\\t(result) \\n\\t\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${server}\\\"`) \\n\\t\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${server}\\\"`)\\n\\t}\\n}\",\"filename\":\"network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n// TODO: Add auto-attack themselves?\\n\\nimport {getRoot as ROOT} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts as COPY_TO_TARGET} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet connections = ns.scan(); // get connected servers\\n\\n\\tfor (let targetServer of connections) {\\n\\t\\tlet rooted = await ROOT(ns, targetServer);\\n\\t\\tif (rooted) {\\n\\t\\t\\t// copy relevant scripts to new server\\n\\t\\t\\tawait COPY_TO_TARGET(ns, targetServer);\\n\\t\\t\\t// call target server to run this script again \\n\\t\\t\\tns.exec(\\\"spread-root.js\\\", targetServer);\\n\\t\\t}else{ // root not succesful skip this one\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spread-root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":118}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/hacknet.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"hacknet.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.brutessh(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.ftpcrack(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.relaysmtp(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.httpworm(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.sqlinject(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// root established already??\\n\\tlet hasRoot = ns.hasRootAccess(target)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${target}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":15.719999999999736,\"minDifficulty\":3,\"moneyAvailable\":29626.341887044957,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"37.8.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/main.js\",\"url\":\"blob:https://danielyxie.github.io/9722391b-288e-4573-a3e6-7fcbfebc3cc6\",\"moduleSequenceNumber\":7993}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":7993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"build_network_1_layer.js\",\"url\":\"blob:https://danielyxie.github.io/d226cf22-150c-4fbe-9d5f-0a16595dbd35\",\"moduleSequenceNumber\":7990}],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":7990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US')}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.2; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.5; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${HOST}`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/0a371606-e118-49bd-acec-7284eae154f8\",\"moduleSequenceNumber\":7728}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":7728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_neighbour.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\", \\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"build_network_1_layer.js\\\",\\n\\t\\t\\t\\\"att_neighbour.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"network_move_scripts.js\\\"\\n\\t\\t];\\n\\t\\tlet result = await ns.scp(files, HOST, server); // returns: true\\n\\t\\t(result) \\n\\t\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${server}\\\"`) \\n\\t\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${server}\\\"`)\\n\\t}\\n}\",\"filename\":\"network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n// TODO: Add auto-attack themselves?\\n\\nimport {getRoot as ROOT} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts as COPY_TO_TARGET} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet connections = ns.scan(); // get connected servers\\n\\n\\tfor (let targetServer of connections) {\\n\\t\\tlet rooted = await ROOT(ns, targetServer);\\n\\t\\tif (rooted) {\\n\\t\\t\\t// copy relevant scripts to new server\\n\\t\\t\\tawait COPY_TO_TARGET(ns, targetServer);\\n\\t\\t\\t// call target server to run this script again \\n\\t\\t\\tns.exec(\\\"spread-root.js\\\", targetServer);\\n\\t\\t}else{ // root not succesful skip this one\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spread-root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":128}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/hacknet.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"hacknet.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.brutessh(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.ftpcrack(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.relaysmtp(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.httpworm(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.sqlinject(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// root established already??\\n\\tlet hasRoot = ns.hasRootAccess(target)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${target}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.476,\"minDifficulty\":3,\"moneyAvailable\":259519.49123803191,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"83.8.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",6],\"dataMap\":{\"joesguns\":[0,0,720,0]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5465.123999999997,\"onlineMoneyMade\":0,\"onlineRunningTime\":5063.20999999782,\"pid\":9,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/f543775a-e167-446f-b029-ec4ff7acf39e\",\"moduleSequenceNumber\":134}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US')}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.2; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.5; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${HOST}`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/1727cc29-3348-45f2-92b6-c1f1c84cdac1\",\"moduleSequenceNumber\":7729}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":7729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_neighbour.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\", \\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"build_network_1_layer.js\\\",\\n\\t\\t\\t\\\"att_neighbour.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"network_move_scripts.js\\\"\\n\\t\\t];\\n\\t\\tlet result = await ns.scp(files, HOST, server); // returns: true\\n\\t\\t(result) \\n\\t\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${server}\\\"`) \\n\\t\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${server}\\\"`)\\n\\t}\\n}\",\"filename\":\"network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n// TODO: Add auto-attack themselves?\\n\\nimport {getRoot as ROOT} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts as COPY_TO_TARGET} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet connections = ns.scan(); // get connected servers\\n\\n\\tfor (let targetServer of connections) {\\n\\t\\tlet rooted = await ROOT(ns, targetServer);\\n\\t\\tif (rooted) {\\n\\t\\t\\t// copy relevant scripts to new server\\n\\t\\t\\tawait COPY_TO_TARGET(ns, targetServer);\\n\\t\\t\\t// call target server to run this script again \\n\\t\\t\\tns.exec(\\\"spread-root.js\\\", targetServer);\\n\\t\\t}else{ // root not succesful skip this one\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spread-root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"joesguns\",\"moduleSequenceNumber\":138}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/hacknet.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"hacknet.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.brutessh(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.ftpcrack(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.relaysmtp(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.httpworm(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.sqlinject(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// root established already??\\n\\tlet hasRoot = ns.hasRootAccess(target)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${target}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.171999999999821,\"minDifficulty\":5,\"moneyAvailable\":1320697.284566969,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"48.2.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":7999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"zer0\",\"moduleSequenceNumber\":8000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"zer0\",\"moduleSequenceNumber\":8001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"48.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"74.5.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"28.4.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"81.9.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",6],\"dataMap\":{\"hong-fang-tea\":[0,0,582,0]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4417.641899999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":5063.20999999782,\"pid\":10,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/a4d63e70-0374-4fee-9788-c4b0ff200d3d\",\"moduleSequenceNumber\":136}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US')}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.2; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.5; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${HOST}`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/6d9b043e-c924-4f7e-97c1-cbf02bdc2eae\",\"moduleSequenceNumber\":7730}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":7730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_neighbour.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\", \\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"build_network_1_layer.js\\\",\\n\\t\\t\\t\\\"att_neighbour.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"network_move_scripts.js\\\"\\n\\t\\t];\\n\\t\\tlet result = await ns.scp(files, HOST, server); // returns: true\\n\\t\\t(result) \\n\\t\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${server}\\\"`) \\n\\t\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${server}\\\"`)\\n\\t}\\n}\",\"filename\":\"network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n// TODO: Add auto-attack themselves?\\n\\nimport {getRoot as ROOT} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts as COPY_TO_TARGET} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet connections = ns.scan(); // get connected servers\\n\\n\\tfor (let targetServer of connections) {\\n\\t\\tlet rooted = await ROOT(ns, targetServer);\\n\\t\\tif (rooted) {\\n\\t\\t\\t// copy relevant scripts to new server\\n\\t\\t\\tawait COPY_TO_TARGET(ns, targetServer);\\n\\t\\t\\t// call target server to run this script again \\n\\t\\t\\tns.exec(\\\"spread-root.js\\\", targetServer);\\n\\t\\t}else{ // root not succesful skip this one\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spread-root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":148}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/hacknet.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"hacknet.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.brutessh(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.ftpcrack(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.relaysmtp(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.httpworm(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.sqlinject(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// root established already??\\n\\tlet hasRoot = ns.hasRootAccess(target)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${target}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.592000000000001,\"minDifficulty\":5,\"moneyAvailable\":1541953.652565729,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"13.4.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",6],\"dataMap\":{\"harakiri-sushi\":[0,0,468,0]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3552.330599999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":5063.20999999782,\"pid\":11,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/fb75918b-1686-4f13-9e27-2c23565f23fd\",\"moduleSequenceNumber\":138}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US')}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.2; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.5; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${HOST}`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/d67f6e96-e106-4165-b98c-8e50aedf6e6e\",\"moduleSequenceNumber\":7731}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":7731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_neighbour.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\", \\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"build_network_1_layer.js\\\",\\n\\t\\t\\t\\\"att_neighbour.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"network_move_scripts.js\\\"\\n\\t\\t];\\n\\t\\tlet result = await ns.scp(files, HOST, server); // returns: true\\n\\t\\t(result) \\n\\t\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${server}\\\"`) \\n\\t\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${server}\\\"`)\\n\\t}\\n}\",\"filename\":\"network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n// TODO: Add auto-attack themselves?\\n\\nimport {getRoot as ROOT} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts as COPY_TO_TARGET} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet connections = ns.scan(); // get connected servers\\n\\n\\tfor (let targetServer of connections) {\\n\\t\\tlet rooted = await ROOT(ns, targetServer);\\n\\t\\tif (rooted) {\\n\\t\\t\\t// copy relevant scripts to new server\\n\\t\\t\\tawait COPY_TO_TARGET(ns, targetServer);\\n\\t\\t\\t// call target server to run this script again \\n\\t\\t\\tns.exec(\\\"spread-root.js\\\", targetServer);\\n\\t\\t}else{ // root not succesful skip this one\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spread-root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":158}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/hacknet.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"hacknet.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.brutessh(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.ftpcrack(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.relaysmtp(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.httpworm(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.sqlinject(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// root established already??\\n\\tlet hasRoot = ns.hasRootAccess(target)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${target}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.10799999999999,\"minDifficulty\":5,\"moneyAvailable\":1969864.7944140872,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"3.5.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"29.1.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"93.8.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":8106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":8107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"omega-net\",\"moduleSequenceNumber\":8108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":66635615,\"moneyMax\":1665890375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":185,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"2.8.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":55118476,\"moneyMax\":1377961900,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":251,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"79.4.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",13],\"dataMap\":{\"iron-gym\":[0,0,143,0]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1741.8686999999995,\"onlineMoneyMade\":0,\"onlineRunningTime\":5063.20999999782,\"pid\":12,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/d27ec147-6024-4b11-a0cb-fc1226b13757\",\"moduleSequenceNumber\":139}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US')}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on ${TARGET} @ ${currentMoney.toLocaleString('en-US')}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.2; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.5; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${HOST}`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/7a0a3b0d-339c-4ce2-8534-1da621094973\",\"moduleSequenceNumber\":7732}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":7732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_neighbour.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\", \\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"build_network_1_layer.js\\\",\\n\\t\\t\\t\\\"att_neighbour.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"network_move_scripts.js\\\"\\n\\t\\t];\\n\\t\\tlet result = await ns.scp(files, HOST, server); // returns: true\\n\\t\\t(result) \\n\\t\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${server}\\\"`) \\n\\t\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${server}\\\"`)\\n\\t}\\n}\",\"filename\":\"network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n// TODO: Add auto-attack themselves?\\n\\nimport {getRoot as ROOT} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts as COPY_TO_TARGET} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/**\\n *  Spread Network loops through all connected networks:\\n * - run getRoot()\\n * \\t\\t- check: already rooted?\\n * \\t\\t- check: enough skill?\\n * \\t\\t- open ports\\n * \\t\\t- nuke to root server\\n * - if success\\n * \\t\\t- copy script to server\\n * \\t\\t- run script again\\n * - else \\n * \\t\\t- continue \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet connections = ns.scan(); // get connected servers\\n\\n\\tfor (let targetServer of connections) {\\n\\t\\tlet rooted = await ROOT(ns, targetServer);\\n\\t\\tif (rooted) {\\n\\t\\t\\t// copy relevant scripts to new server\\n\\t\\t\\tawait COPY_TO_TARGET(ns, targetServer);\\n\\t\\t\\t// call target server to run this script again \\n\\t\\t\\tns.exec(\\\"spread-root.js\\\", targetServer);\\n\\t\\t}else{ // root not succesful skip this one\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"spread-root.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/hacknet.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"hacknet.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.brutessh(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.ftpcrack(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.relaysmtp(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.httpworm(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? (ns.sqlinject(target), count++)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// root established already??\\n\\tlet hasRoot = ns.hasRootAccess(target)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${target}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":38.00000000000006,\"minDifficulty\":10,\"moneyAvailable\":4660485.623134741,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-232159-FoodNStuff.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,10],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"25.9.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":493,\"serverGrowth\":36}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"88.7.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"62.5.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":763,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"3.1.3.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":545,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"42.1.2.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":344,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"48.1.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":217,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"45.0.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":521,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"46.7.8.8\",\"isConnectedTo\":true,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** @param {NS} ns **/\\nexport async function getRoot(ns, SERVER) {\\n\\t// root established?\\n\\tlet hasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Already root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(SERVER)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(SERVER) \\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n\\n\\t// Nuke server\\n\\tns.nuke(SERVER);\\n\\n\\t// check success \\n\\thasRoot = ns.hasRootAccess(SERVER)\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${SERVER}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Did not have enought tools to get root @${SERVER}.`)\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet serverList = ns.scan()\\n\\tns.print(serverList)\\n\\n\\tfor (let server of serverList) {\\n\\t\\t// sufficient skill for server?\\n\\t\\tif ( ns.getHackingLevel() < ns.getServerRequiredHackingLevel(server)) {\\n\\t\\t\\tns.tprint(`ERROR: ${server} requires ${ns.getServerRequiredHackingLevel(server)} hacking skill`);\\n\\t\\t\\tcontinue;\\n\\t\\t} \\n\\t\\t/// run rooting attack on this server\\n\\t\\tlet gotRoot = await getRoot(ns, server);\\n\\t\\t(gotRoot) \\n\\t\\t\\t? ns.tprint(`INFO: rooted ${server}`)\\n\\t\\t\\t: ns.tprint(`ERROR: failed to root ${server}`);\\n\\t}\\n}\",\"filename\":\"/0_access/main.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/main.js\",\"url\":\"blob:https://danielyxie.github.io/79b086ef-6ec0-4b08-afa9-28f38e00b95f\",\"moduleSequenceNumber\":8102}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":8102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getServer().hostname\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"spread-root.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":8006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//// TODO: This is recursive function => set cancel condition otherwise it will crash\\n/**\\n * \\trun: \\n * \\t\\trun build_network_1_layer.js\\n * \\tdesc:\\n * \\t\\t- infiltrates neigbour servers\\n * \\t\\t- pushes scripts to infiltrate next layer to servers\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// infiltrate all servers connected\\n\\tns.run(\\\"/0_access/main.js\\\", 1)\\n\\n\\t// current server \\n\\tconst HOST = ns.getHostname()\\n\\tlet serverList = ns.scan(HOST) //you can add host as param if needed\\n\\n\\t// push infiltrations scripts to server connected\\n\\tfor (let server of serverList) {\\n\\t\\tlet files = [\\n\\t\\t\\t\\\"/0_access/main.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\" ,\\n\\t\\t\\t\\\"build_network_1_layer.js\\\"\\n\\t\\t\\t];\\n\\t\\tawait ns.scp(files, HOST, server);\\n\\t\\t\\n\\t\\t//TODO: Build real recursive function\\n\\t\\t// CURRENTLY THIS WILL CRASH EVERYTHING!!!\\n\\t\\t// run this script on infiltrated server again\\n\\t\\t//(result) ? ns.exec(\\\"build_network.js\\\", server, 1) : ns.tprint(`INFO: Depth ATTACK failed from ${server}`);\\n\\t}\\n\\n}\",\"filename\":\"build_network_1_layer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"build_network_1_layer.js\",\"url\":\"blob:https://danielyxie.github.io/878fadca-7d12-4279-8e5b-99575efbc24e\",\"moduleSequenceNumber\":8101}],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":8101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-924861-Sector-12.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,20],[2,10],[5,6],[20,23],[12,13],[3,12],[18,22],[16,20],[1,6],[24,33],[19,26],[15,24],[24,34],[16,19],[7,8]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"78.2.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"33.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.9616,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":2.6507626737333503,\"favor\":0.0203,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0095,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":139.73669833332445}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":30.8412,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":24430.316478894274}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":62.8405,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":4288.959517617513}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":44.3187,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1727.8432059624915}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"de\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2,\"y\":1,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644093582715","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644093582723"}}