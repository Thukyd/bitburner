{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":472,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.4362651991475277,\"hacking_speed_mult\":1.3335909506596457,\"hacking_money_mult\":1.702437620098595,\"hacking_grow_mult\":1.1843044313729356,\"hacking_exp\":2126048.6190627986,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.7762322009996228,\"strength_mult\":1.1843044313729356,\"defense_mult\":1.1843044313729356,\"dexterity_mult\":1.6414459418828886,\"agility_mult\":1.2435196529415824,\"charisma_mult\":1.4211653176475227,\"hacking_exp_mult\":2.5326143011634743,\"strength_exp_mult\":1.4981451056867634,\"defense_exp_mult\":1.4981451056867634,\"dexterity_exp_mult\":1.4981451056867634,\"agility_exp_mult\":1.4981451056867634,\"charisma_exp_mult\":1.4981451056867634,\"company_rep_mult\":1.1843044313729356,\"faction_rep_mult\":1.1843044313729356,\"money\":1673925695.3002076,\"city\":\"Chongqing\",\"location\":\"KuaiGong International\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":25191.200000019635,\"ram\":64,\"totalMoneyGenerated\":487525744.21703786,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":25190.200000019635,\"ram\":64,\"totalMoneyGenerated\":485501361.13731116,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":25189.200000019635,\"ram\":64,\"totalMoneyGenerated\":482930861.6466131,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":25188.20000001964,\"ram\":64,\"totalMoneyGenerated\":481824749.85946596,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":25187.20000001964,\"ram\":64,\"totalMoneyGenerated\":480804721.6250191,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":25186.20000001964,\"ram\":64,\"totalMoneyGenerated\":479318596.0173629,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":19216.60000000967,\"ram\":64,\"totalMoneyGenerated\":441623535.6372513,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":19215.60000000966,\"ram\":64,\"totalMoneyGenerated\":441325861.0963549,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":19214.600000009657,\"ram\":64,\"totalMoneyGenerated\":440639233.8973704,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":18240.40000000939,\"ram\":64,\"totalMoneyGenerated\":436698578.8907354,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":17984.400000009417,\"ram\":64,\"totalMoneyGenerated\":430269355.07605225,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":17983.400000009417,\"ram\":64,\"totalMoneyGenerated\":424152319.952046,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":15751.400000008842,\"ram\":64,\"totalMoneyGenerated\":378668824.5464742,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":15751.00000000884,\"ram\":64,\"totalMoneyGenerated\":378103005.188829,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":15750.400000008838,\"ram\":64,\"totalMoneyGenerated\":377294655.66055363,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":15737.400000008774,\"ram\":64,\"totalMoneyGenerated\":376712268.8958269,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":15688.600000008691,\"ram\":64,\"totalMoneyGenerated\":375856006.28442174,\"name\":\"hacknet-node-16\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\",\"CyberSec\",\"NiteSec\",\"The Black Hand\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"DataJack\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1843044313729356,\"crime_success_mult\":1.1843044313729356,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"Tian Di Hui\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.37989214517452113,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.5733248119056673,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":5056.2124954143355,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":7621.6935648838935,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":3327000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1843044313729356,\"hacknet_node_money_mult\":2.9869268044629855,\"hacknet_node_purchase_cost_mult\":0.644851542938704,\"hacknet_node_ram_cost_mult\":0.8429431933839266,\"hacknet_node_core_cost_mult\":0.8429431933839266,\"hacknet_node_level_cost_mult\":0.7165017143763376,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644778970773,\"totalPlaytime\":976989200,\"playtimeSinceLastAug\":25199200,\"playtimeSinceLastBitnode\":976989200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":95506713.75112054,\"hacknet\":7399249679.729523,\"hacknet_expenses\":-5821430698.080562,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1672925695.3002145,\"work\":0,\"servers\":0,\"other\":-400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4002000,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1225874693.2755127,\"hacknet\":63792302291.00947,\"hacknet_expenses\":-26460423168.399586,\"hospitalization\":-4908000,\"infiltration\":0,\"sleeves\":0,\"stock\":-6200000000,\"total\":5574196269.065718,\"work\":51919773.99902667,\"servers\":-4647404276.312332,\"other\":-1400000,\"augmentations\":-22177763045.622707}},\"scriptProdSinceLastAug\":95506713.75112054,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1643885384244},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1643894920823},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1643900797590},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1643906299108},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643911675318},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1643924584948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1643960666103},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643963802896},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643998639673},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644042685265},{\"ID\":\"TOR\",\"unlockedOn\":1644053943665},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1644141194118},{\"ID\":\"NITESEC\",\"unlockedOn\":1644163099111},{\"ID\":\"4S\",\"unlockedOn\":1644176737287},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644187629240},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644218881854},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1644300547385},{\"ID\":\"DONATION\",\"unlockedOn\":1644744654198}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"28.9.0.8\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"DeepscanV1.exe\"],\"ramUsed\":2030.3999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",846],\"dataMap\":{\"iron-gym\":[0,0,19458,0]},\"filename\":\"/1_hack/standard.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":501890.4816483498,\"onlineMoneyMade\":0,\"onlineRunningTime\":13910.610000008563,\"pid\":172,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":846,\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/d1ff2e49-06c5-4a30-b23f-9363f0d5013e\",\"moduleSequenceNumber\":59220}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * TODO use threats\\n * TODO use host as param\\n * TODO write script to run this script with list of servers\\n */\\n\\n/** \\n * \\ttryToHack\\n * \\t@params \\n * \\t\\thost: string => \\n * \\t\\tnas: Netscript API \\n * \\n * \\t- attemps to hack server \\n * \\t\\n * \\treturns bool\\n * \\t\\t\\\"true\\\" for success\\n * \\t\\t\\\"false\\\" for failure \\n * \\n **/\\nexport async function tryToHack(ns, host) {\\n\\tlet result = await ns.hack(host);\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * weakenHost\\n * \\t- weakens host till minimum Security level is reached\\n * \\t\\thttps://bitburner.readthedocs.io/en/latest/netscript/basicfunctions/weaken.html\\n */\\nexport async function weakenSecurityLevel(ns, host) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(host); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(host); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(host)\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(host);\\n\\t\\tns.print(`${host}'s security level is ${currentLvl} of min ${minLvl}`)\\n\\t}\\n\\n\\n\\n}\\n\\n\\n// TODO:: Thread param + move to it's own hack folder!\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tlet host = ns.args[0];\\n\\n\\tlet threads = 1\\n\\t(ns.args[1]) ? threads = ns.args[1] : ns.tprint(`INFO: No threads as param => default = 1`);\\n\\n\\t// try rerun the hack until it fails\\n\\twhile (ns.getServerMoneyAvailable(host) > 0) {\\n\\t\\tlet hackSuccess = await tryToHack(ns, host);\\n\\n\\t\\t// weaken to the lowest security level again\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`INFO: hacking ${host} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, host);\\n\\t\\t}\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"/hack_network/home/hack_me.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hack_network/hack_me.js\",\"url\":\"blob:https://danielyxie.github.io/0c960d23-bd03-4e8f-859a-082f018c582e\",\"moduleSequenceNumber\":45}],\"dependents\":[],\"ramUsage\":2.15,\"server\":\"home\",\"moduleSequenceNumber\":59130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet servers = ns.scan();\\n\\n\\tfor (let server of servers) {\\n\\t\\tns.killall(server)\\n\\t\\tns.tprint(`INFO: killed all scripts on ${server}`)\\n\\t}\\n}\",\"filename\":\"/kill_scripts/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/kill_scripts/main.js\",\"url\":\"blob:https://danielyxie.github.io/6aebf27f-cb36-4c09-8309-a71dbb78230b\",\"moduleSequenceNumber\":3009}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":59131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:https://danielyxie.github.io/d1ff2e49-06c5-4a30-b23f-9363f0d5013e\",\"moduleSequenceNumber\":59220}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":59220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/22d7c61a-e543-42b0-ba48-43b88e796701\",\"moduleSequenceNumber\":19979},{\"filename\":\"att_network_themselves.js\",\"url\":\"blob:https://danielyxie.github.io/44fa7223-bf4f-4c99-8f23-73ce132655a3\",\"moduleSequenceNumber\":20056}],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"home\",\"moduleSequenceNumber\":59133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tns.getServerRequiredHackingLevel(\\\"home\\\")\\n\\n}\",\"filename\":\"/test/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/test/test.js\",\"url\":\"blob:https://danielyxie.github.io/6e17554f-a8e4-4fee-9e83-6807c54768cc\",\"moduleSequenceNumber\":21417}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":59134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/ca22768a-ef50-4dcd-b64b-a9d72fed3343\",\"moduleSequenceNumber\":114933}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":59135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as TIER} from \\\"2_hacknet/tier-orchestration.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// RUN THE loop and execute the prefered scaling method\\n\\tlet stillUpgrading = false;\\n\\n\\twhile(!stillUpgrading) {\\n\\t\\tstillUpgrading = await TIER(ns) // Orchstrate by Tier System\\n\\t\\tawait ns.sleep(500)\\n\\t}\\n\\n\\tns.tprint(`ERROR: MAX NODES OF ${ns.hacknet.numNodes()} REACHED`)\\n}\",\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/2_hacknet/tier-orchestration.js\",\"url\":\"blob:https://danielyxie.github.io/a792f818-669d-4fb3-9a15-245e3638c3e1\",\"moduleSequenceNumber\":86041},{\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"blob:https://danielyxie.github.io/5172f15b-99ea-41b8-9e12-e9e96e9dccb2\",\"moduleSequenceNumber\":86817}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":86817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TARGET = \\\"foodnstuff\\\"; //\\\"n00dles\\\"\\n\\n\\t// NS1:\\n\\t//For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n\\tlet growTimes = ns.growthAnalyze(TARGET, 2);\\n\\t//If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n\\n\\tns.tprint(`TEST: ns.growthAnalyze(TARGET, 2) returns ${growTimes}`)\\n\\n\\t////////////////////////////////////\\n\\n\\tlet growth = ns.getServerGrowth(TARGET)\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET)\\n\\tlet availableMoney =ns.getServerMoneyAvailable(TARGET)\\n\\n\\tns.tprint(`INFO: BEFORE Rate = ${growth}, ${availableMoney.toLocaleString('de-DE')} of  ${maxMoney.toLocaleString('de-DE')}`)\\n\\tawait ns.grow(TARGET);\\n\\tgrowth = ns.getServerGrowth(TARGET);\\n\\tavailableMoney =ns.getServerMoneyAvailable(TARGET);\\n\\tns.tprint(`INFO: AFTER Rate = ${growth}, ${availableMoney.toLocaleString('de-DE')} of  ${maxMoney.toLocaleString('de-DE')}`)\\n\\t\\n\\n\\t/////////\\n\\t// a) don't push over omney limit\\n\\t// b) start growth if under certain % of money level\\n\\t// c) estimate how much growth operations to grow until x% of growth\\n\\n\\t// Configuration variables\\n\\tlet min_percentage = 0.5; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\n\\n\\t\\n\\t\\n}\",\"filename\":\"/1_hack/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/test.js\",\"url\":\"blob:https://danielyxie.github.io/bd73d23c-f00a-406e-91e5-f08c8b6b81d4\",\"moduleSequenceNumber\":30778}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":59137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function getNum(ns) {\\n\\tns.tprint(\\\"EXPORT | Here is your Num\\\");\\n\\treturn 1;\\n}\\n\\nexport async function getMap(ns) {\\n\\tns.tprint(\\\"EXPORT | Here is your MAP\\\");\\n\\tlet myMap = new Map;\\n\\tmyMap.set(\\\"Key\\\", \\\"Value\\\")\\n\\treturn myMap\\n}\",\"filename\":\"/test/export.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":59138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as TEST from \\\"test/export.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// NUM\\n\\tlet num = await TEST.getNum(ns);\\n\\tns.tprint(\\\"IMPORT | Here is your Num\\\");\\n\\tns.tprint(num)\\n\\n\\t// MAP\\n\\tlet map = await TEST.getMap(ns);\\n\\tns.tprint(\\\"IMPORT | Here is your Map\\\");\\n\\tns.tprint(map)\\n\\tns.tprint(map.get(\\\"Key\\\"));\\n\\n}\",\"filename\":\"/test/import.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/test/export.js\",\"url\":\"blob:https://danielyxie.github.io/a9c45ddb-a107-4d2f-b5be-dace92b6196d\",\"moduleSequenceNumber\":45668},{\"filename\":\"/test/import.js\",\"url\":\"blob:https://danielyxie.github.io/ee5ef8ee-fd2f-49fd-a93b-2261e4b580ec\",\"moduleSequenceNumber\":46493}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":59139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":59140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"att_specific.js\",\"url\":\"blob:https://danielyxie.github.io/468350ad-8d40-4ff3-8f5a-c831a1776d39\",\"moduleSequenceNumber\":59219}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":59219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import * as WURST from \\\"./test/test_spread_end.js\\\"\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// task: pass the array as values to param\\n\\t// => if this does not work; write the array elements into a file\\n\\t// then read the file again\\n\\n\\tlet arr =  [\\\"a\\\", \\\"b\\\" , \\\"c\\\"];\\n\\n\\tns.run(\\\"/test/test_spread_end.js\\\",1,...arr);\\n}\",\"filename\":\"/test/test_spread_start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/test/test_spread_start.js\",\"url\":\"blob:https://danielyxie.github.io/cbced69f-dba2-42b8-8764-93f3d62f9d12\",\"moduleSequenceNumber\":23170}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":59142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet myArgs = [...ns.args];\\n\\n\\tns.tprint(myArgs)\\n\\t\\n\\n\\n}\",\"filename\":\"/test/test_spread_end.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/test/test_spread_end.js\",\"url\":\"blob:https://danielyxie.github.io/349d4729-9dcb-47ef-a8a6-0d92f3fb9e5d\",\"moduleSequenceNumber\":23171}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":59143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/20df2d81-4d3d-48ce-8b7e-eae22e8d5806\",\"moduleSequenceNumber\":59135},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/2c661c13-31d1-463a-b348-632cd30ba176\",\"moduleSequenceNumber\":59140},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/087bc251-3fa2-40d3-8a7c-879fb286f67d\",\"moduleSequenceNumber\":59150}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":59150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_network_themselves.js\\n * \\tdesc:\\n * \\t\\t- copies attack script on neighbour servers\\n * \\t\\t- lets them attack themselves\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// check for required ram\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tawait ns.sleep(1000)\\n\\n\\t// ceheck for connections \\n\\tlet connections = ns.scan()\\n\\n\\tns.tprint(`\\\\n\\\\nINFO: Starting hacking...`)\\n\\n\\tfor (let host of connections) {\\n\\t\\t/**\\tcalculate threads\\n\\t\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t\\t */\\n\\t\\tlet availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host); // returns: int\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t\\t// copy scripts to server\\n\\t\\tlet files = [\\\"/1_hack/standard.js\\\", \\\"att_network_themselves.js\\\"]\\n\\t\\tlet copy = await ns.scp(files, host); // returns: true\\n\\t\\t(copy) ? ns.tprint(`\\\\nINFO: Successful moved script on ${host}`)\\n\\t\\t\\t:ns.tprint(`\\\\nError: Failed to move script to ${host}`)\\n\\t\\t\\n\\t\\tif (THREADS < 1) {\\n\\t\\t\\tns.tprint(`\\\\nError: Not enough threads (${THREADS}) on ${host} available`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// run script on host\\n\\t\\tlet res = ns.exec(\\\"/1_hack/standard.js\\\", host, THREADS, host, THREADS);\\n\\t\\t(res) \\n\\t\\t\\t? ns.tprint(`\\\\nINFO: Hack @${host} started with ${THREADS}`)\\n\\t\\t\\t: ns.tprint(`\\\\nERROR: Hack @${host} failed`);\\n\\t}\\n\\n}\",\"filename\":\"att_network_themselves_DEPRECATED.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"att_network_themselves_DEPRECATED.js\",\"url\":\"blob:https://danielyxie.github.io/9ded7a59-7b52-45a3-8c2f-bced5c758b60\",\"moduleSequenceNumber\":7045}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":59145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/dd2cdab3-e353-49a2-88e3-87c41ed4e846\",\"moduleSequenceNumber\":9443},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/66baf888-c035-4316-bbf9-9b53e1f51471\",\"moduleSequenceNumber\":166},{\"filename\":\"spread_and_self_att.js\",\"url\":\"blob:https://danielyxie.github.io/fd82eb1b-80f9-483b-b83e-d05bf977cade\",\"moduleSequenceNumber\":10671}],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":59146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"CSEC\",\"moduleSequenceNumber\":59147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns\\n * @returns {Object[]} cluster information as name, gb, ram etc. \\n **/\\nasync function getClusterData(ns) {\\n\\tlet nodeCount = ns.hacknet.numNodes()\\n\\t// there is no node yet\\n\\tif (nodeCount == 0) {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet cluster = []\\n\\tfor (let i = 0; i < nodeCount; i++) {\\n\\t\\tlet singleNode = await ns.hacknet.getNodeStats(i);\\n\\t\\tcluster.push(singleNode)\\n\\t}\\n\\n\\treturn cluster;\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} nodeNum \\n * @returns {Object[]} the first \\\"nodeNum\\\" of the cluster information\\n **/\\nasync function getXNodes(clusterData, nodeNum) {\\n\\treturn await clusterData.slice(0, nodeNum);\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxLevel  \\n * @returns {Object[]} a sorted array of nodes which did not reach maxLevel yet\\n **/\\nasync function nodesByMinLevel(clusterData, maxLevel) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.level > b.level) ? 1 : -1) // sorted by min level => buy low levels first\\n\\t\\t.filter(node => node.level < maxLevel)\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxRam \\n * @returns {Object[]} a sorted array of nodes which did not reach maxRam  yet\\n **/\\nasync function nodesByMinRam(clusterData, maxRam) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.ram > b.ram) ? 1 : -1) // sorted by min ram => buy low ram first\\n\\t\\t.filter(node => node.ram < maxRam)\\n\\t\\t\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxRam \\n * @returns {Object[]} a sorted array of nodes which did not reach maxCores  yet\\n **/\\nasync function nodesByMinCores(clusterData, maxCores) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.cores > b.cores) ? 1 : -1) // sorted by min cores => buy low amount cores first\\n\\t\\t.filter(node => node.cores < maxCores)\\n}\\n\\n/** \\n * Loop to buy nodes until you are out of money or the max is reached\\n * @param {NS} ns \\n * @param {Number} maxNodestoBuy \\n **/\\nasync function buyNumNodes(ns, maxNodesToBuy) {\\n\\tns.print(\\\"INFO: buyNumNodes() check\\\")\\n\\tlet numNodes = ns.hacknet.numNodes();\\n\\tlet money =  Math.floor(ns.getPlayer().money) - 1; // -1 to avoid rounding errors\\n\\tlet price =  Math.floor(ns.hacknet.getPurchaseNodeCost());\\n\\n\\tif (numNodes < maxNodesToBuy && money > price) {\\n\\t\\tlet nodeName = ns.hacknet.purchaseNode();\\n\\t\\tns.tprint(`INFO: Purchased hacknet-node-${nodeName}`);\\n\\t}\\n}\\n\\n/**\\n * - Loop to buy ram until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumRam(ns, cluster) {\\n\\t// check if there are clusters which do not have the max ram\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more RAM to nodes because defined 'maxRamToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeRam(nodeIndex , 1) // buy ram\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to ${cluster[0].ram} ram`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n/**\\n * - Loop to buy level until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumLevel(ns, cluster) {\\n\\t// check if there are clusters which do not have the max level\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more Level to nodes because defined 'maxLevelToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeLevel(nodeIndex , 10) // buy level\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to level ${ns.hacknet.getNodeStats(nodeIndex).level}`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n/**\\n * - Loop to buy cores until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumCores(ns, cluster) {\\n\\t// check if there are clusters which do not have the core ram\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more cores to nodes because defined 'maxCoresToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeCore(nodeIndex , 1) // buy ram\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to ${cluster[0].cores + 1} cores`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst CLUSTER = await getClusterData(ns);\\n\\n\\tlet OPERATIONS_LOG = {\\n\\t\\t\\\"max_nodes\\\": 12,\\n\\t\\t\\\"a\\\": false,\\n\\t\\t\\\"b\\\": false,\\n\\t\\t\\\"c\\\" : false,\\n\\t\\t\\\"d\\\" : false,\\n\\t\\t\\\"e\\\" : false,\\n\\t\\t\\\"f\\\" :false,\\n\\t\\t\\\"g\\\" : false,\\n\\t}\\n\\n\\t////////////\\n\\t// a) purchase X nodes\\n\\tif(ns.hacknet.numNodes() < OPERATIONS_LOG.max_nodes)\\t{\\n\\t\\treturn await buyNumNodes(ns, OPERATIONS_LOG.max_nodes)\\n\\t} else {\\n\\t\\tns.print(`INFO: Operation a) | MAX_NODES of ${OPERATIONS_LOG.max_nodes} reached`);\\n\\t\\tOPERATIONS_LOG.a = true;\\n\\t}\\n\\n\\tif(!OPERATIONS_LOG.a){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t////////////\\n\\t// b) upgrade X nodes to 16gb ram\\n\\tlet maxRam = 16\\n\\t// order nodes by min ram\\n\\tlet clusterByRam = await nodesByMinRam(CLUSTER, maxRam);\\n\\t// if there are no upgradable nodes (conditions apply) it returns false\\n\\tlet bStillToBeUpgraded = await buyNumRam(ns, clusterByRam)\\n\\tif (!bStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation b) | relevant nodes fully upgraded to ${maxRam} gb ram`)\\n\\t\\tOPERATIONS_LOG.b = true;\\n\\t}\\n\\t\\n\\tif(!OPERATIONS_LOG.b){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// c) upgrade X nodes to level 100\\n\\tlet maxLevel = 100\\n\\tlet clusterByLevel = await nodesByMinLevel(CLUSTER, maxLevel);\\n\\tlet cStillToBeUpgraded = await buyNumLevel(ns, clusterByLevel);\\n\\tif (!cStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation c) | relevant nodes fully upgraded to level ${maxLevel}`)\\n\\t\\tOPERATIONS_LOG.c = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.c){\\n\\t\\treturn false;\\n\\t}\\n\\n\\n\\t///////////\\n\\t// d) upgrade X nodes to 4 cores\\n\\tlet maxCores = 4\\n\\tlet clusterByCore = await nodesByMinCores(CLUSTER, maxCores);\\n\\tlet dStillToBeUpgraded = await buyNumCores(ns, clusterByCore);\\n\\tif (!dStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation d) | relevant nodes fully upgraded to ${maxCores} cores`)\\n\\t\\tOPERATIONS_LOG.d = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.d){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// e) upgrade X nodes to 64gb ram\\n\\tmaxRam = 64\\n\\t// order nodes by min ram\\n\\tclusterByRam = await nodesByMinRam(CLUSTER, maxRam);\\n\\t// if there are no upgradable nodes (conditions apply) it returns false\\n\\tlet eStillToBeUpgraded = await buyNumRam(ns, clusterByRam)\\n\\tif (!eStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation e) | relevant nodes fully upgraded to ${maxRam} gb ram`)\\n\\t\\tOPERATIONS_LOG.e = true;\\n\\t}\\n\\t\\n\\tif(!OPERATIONS_LOG.e){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// f) upgrade X nodes to level 200\\n\\tmaxLevel = 200\\n\\tclusterByLevel = await nodesByMinLevel(CLUSTER, maxLevel);\\n\\tlet fStillToBeUpgraded = await buyNumLevel(ns, clusterByLevel);\\n\\tif (!fStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation f) | relevant nodes fully upgraded to level ${maxLevel}`)\\n\\t\\tOPERATIONS_LOG.f = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.f){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// g) upgrade X nodes to 16 cores\\n\\tmaxCores = 16\\n\\tclusterByCore = await nodesByMinCores(CLUSTER, maxCores);\\n\\tlet gStillToBeUpgraded = await buyNumCores(ns, clusterByCore);\\n\\tif (!gStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation g) | relevant nodes fully upgraded to ${maxCores} cores`)\\n\\t\\tOPERATIONS_LOG.g = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.g){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// h) \\n\\t/// Repeat with next two nodes\\n\\tOPERATIONS_LOG = {\\n\\t\\t\\\"max_nodes\\\": OPERATIONS_LOG.max_nodes + 2,\\n\\t\\t\\\"a\\\": false,\\n\\t\\t\\\"b\\\": false,\\n\\t\\t\\\"c\\\" : false,\\n\\t\\t\\\"d\\\" : false,\\n\\t\\t\\\"e\\\" : false,\\n\\t\\t\\\"f\\\" :false,\\n\\t\\t\\\"g\\\" : false,\\n\\t}\\n\\n// TODO\\n\\t// change to 16\\n\\tif (OPERATIONS_LOG.max_nodes > 18) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\n}\",\"filename\":\"/2_hacknet/tier-orchestration.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":86041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"Todo\\nFix \\\"root-Spread.js\\\"\\n- How can I make it smaller than 4GB => delete 350mb!!\\n\\n- Can I load the getRoot.js \\\"port tools\\\" conditionally from server space?\\n=> light version with small servers\\n=> full version with big servers\\n\\n\\nDo not move scripts in the same step\\n// that in seperate step by creating 2 scripts out of that\\n// probably with tail command\\nawait moveScripts(ns, targetServer)\\n\\n\\nDESCRIPTION\\n- not all possible rooting attacks are working\\n\\t=> never cracks zer0!! not enough ram on n00dles\\n\\tTotal:     4.00GB\\n\\nError\\n[n00dles ~/]> run root-spread.js \\nThis machine does not have enough RAM to run this script with 1 threads. Script requires 4.35GB of RAM\\n\\n\\n\\nSCRIPT RAM \\n\\ngetServer (fn)\\t2.00GB\\nbaseCost (misc)\\t1.60GB\\nexec (fn)\\t1.30GB\\nscp (fn)\\t600.00MB\\nscan (fn)\\t200.00MB\\ngetServerRequiredHackingLevel (fn)\\t100.00MB\\nfileExists (fn)\\t100.00MB\\ngetHackingLevel (fn)\\t50.00MB\\nnuke (fn)\\t50.00MB\\nhasRootAccess (fn)\\t50.00MB\\nbrutessh (fn)\\t50.00MB\\nftpcrack (fn)\\t50.00MB\\nrelaysmtp (fn)\\t50.00MB\\nhttpworm (fn)\\t50.00MB\\nsqlinject (fn)\\t50.00MB\\n\\n\\nROUTE:\\n\\nhome => n00dles => zer0\\n\\n------Root Access: NO, Required hacking skill: 75\\n\\n------Number of open ports required to NUKE: 1\\n\\n------RAM: 32.00GB\\n\\n###################################################\\n\\nSpread Self_Attack\\n- Loop durch die nächsten Netzwerke\\n\\t- Wenn Ram zu gering => continue\\n\\t- Wenn nicht Root Server => continue\\n\\t- Start hack dich selbst\\nFIXME ==> Es werde nicht alle Server gestartet\\n\\t\\t\\tVielleicht ist das Skript auch zu groß um es zu verteilen!\\n==> Alternative => Das Skript nicht auf den Servern, sondern jeweils\\n\\tvon Home aus anfahren lassen\\n\\n###################################################\\nImprove HACK\\n\\n\\n- s) check if the grow gives information about the efficency \\n\\t\\tgrow: Available money on 'iron-gym' grown by 3.888115%. Gained 2.631k hacking exp (t=216).\\n\\t=> logs give a hint in %; 3.88% is quite low => at this point you can attack again\\n\\t=> do not grow from x to y percent, but decide by general growth rate\\n\\t\\t=> if it's very low then reduce growing until it's nearly drained\\n\\t\\t=> if it's high use grow extensiveley\\n\\t- to write this => write a scripts which loops through connected servers\\n\\t\\tcheck the grow rate and see what's low and what's high\\n\\n- b) weaken() only after a couple of tries defiened by chance to crack\\n\\n- c) Hack does not work!!\\n\\nfoodnstuff's security level is 3 of 3\\n\\nReached min security level of foodnstuff: 3 of 3\\n\\nhack: Executing on 'foodnstuff' in 4.700 seconds (t=425)\\n\\nhack: Successfully hacked 'foodnstuff' for $0.000 and 1.072k exp (t=425)\\n\\nERROR: hacking foodnstuff failed.\\nStarting proces to lower security level\\n\\ngetServerMinSecurityLevel: returned 3.000 for foodnstuff\\n\\ngetServerSecurityLevel: returned 3.390 for 'foodnstuff'\\n\\nweaken: Executing on 'foodnstuff' in 18.838 seconds (t=425)\\n\\n\\n###################################################\\nWrite Automatic Nodes \\n=> think about optimizing it\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"6.2.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":58213138618,\"moneyMax\":1455328465450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1157,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"48.3.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48425861310,\"moneyMax\":1210646532750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1126,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"53.7.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":18341845032,\"moneyMax\":458546125800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1084,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"81.8.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":28601512408,\"moneyMax\":715037810200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":75}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"18.7.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":36167541139,\"moneyMax\":904188528475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1192,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"8.6.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":23049928350,\"moneyMax\":576248208750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":988,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"24.4.7.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":16740459040,\"moneyMax\":418511476000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1017,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"70.1.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":17404142193,\"moneyMax\":435103554825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":992,\"serverGrowth\":94}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"26.7.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":21068543543,\"moneyMax\":526713588575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"31.5.4.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1695667226,\"moneyMax\":42391680650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1110,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"64.9.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1355,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"94.1.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1171050922,\"moneyMax\":29276273050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":68}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"53.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":866481290,\"moneyMax\":21662032250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":938,\"serverGrowth\":68}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"44.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":632587453,\"moneyMax\":15814686325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":910,\"serverGrowth\":37}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"86.7.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":560968683,\"moneyMax\":14024217075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":881,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"35.3.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":767134789,\"moneyMax\":19178369725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":74}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"39.4.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":920956580,\"moneyMax\":23023914500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"1.9.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1199109123,\"moneyMax\":29977728075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":82}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-623690.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[172,81,94,145],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"25.6.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":785017016,\"moneyMax\":19625425400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":68}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"32.4.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":501792610,\"moneyMax\":12544815250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"43.6.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":822209351,\"moneyMax\":20555233775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":900,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"19.7.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":830396106,\"moneyMax\":20759902650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"29.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1062289370,\"moneyMax\":26557234250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"18.0.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":983325900,\"moneyMax\":24583147500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"60.0.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":1058624012,\"moneyMax\":26465600300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":800,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"36.5.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":957677056,\"moneyMax\":23941926400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"81.0.5.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":773273874,\"moneyMax\":19331846850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":757,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"25.9.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1615170267,\"moneyMax\":40379256675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":59}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"61.3.5.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1677235200,\"moneyMax\":41930880000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":763,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"2.6.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1143159282,\"moneyMax\":28578982050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"33.0.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1480652822,\"moneyMax\":37016320550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"37.4.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1069736773,\"moneyMax\":26743419325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":79}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"4.7.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":720953976,\"moneyMax\":18023849400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":717,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"12.9.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":594130224,\"moneyMax\":14853255600,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":475,\"serverGrowth\":40}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"96.8.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":672845947,\"moneyMax\":16821148675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":537,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"31.8.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":316136717,\"moneyMax\":7903417925,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":427,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"25.0.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":234504964,\"moneyMax\":5862624100,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":383,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"26.4.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":972055715,\"moneyMax\":24301392875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":748,\"serverGrowth\":77}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"51.3.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/a51424dc-9ab5-4d98-9cd1-2b7b19f345f5\",\"moduleSequenceNumber\":88708},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/e1dff3e2-d561-42d5-aa17-b2de54af6880\",\"moduleSequenceNumber\":88707},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/37a92dd9-8da1-4cf7-b882-fdadee0b1143\",\"moduleSequenceNumber\":88727}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"summit-uni\",\"moduleSequenceNumber\":88727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":88703}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"summit-uni\",\"moduleSequenceNumber\":88704}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"summit-uni\",\"moduleSequenceNumber\":88705}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":88706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":88707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"summit-uni\",\"moduleSequenceNumber\":88708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":88709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":335377025,\"moneyMax\":8384425625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":439,\"serverGrowth\":50}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"71.4.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":531025312,\"moneyMax\":13275632800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":571,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"18.9.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/3597abe0-6edb-44ca-827f-5ed1b4abe847\",\"moduleSequenceNumber\":88742},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/eb820a8b-4186-4214-86af-6cbd152773e2\",\"moduleSequenceNumber\":88741},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/0c89408d-d36b-4d73-b6f7-5b5e0c84475a\",\"moduleSequenceNumber\":88760}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"catalyst\",\"moduleSequenceNumber\":88760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"catalyst\",\"moduleSequenceNumber\":88737}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"catalyst\",\"moduleSequenceNumber\":88738}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"catalyst\",\"moduleSequenceNumber\":88739}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":88740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":88741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"catalyst\",\"moduleSequenceNumber\":88742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":88743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":348247251,\"moneyMax\":8706181275,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":442,\"serverGrowth\":31}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"33.3.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/7bd7b77c-1d25-4d84-9d6c-286dade97d6a\",\"moduleSequenceNumber\":65196},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/ce2efa5c-0ff1-4426-bd5f-e5dc7abaff79\",\"moduleSequenceNumber\":65195},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/ee425d92-f682-444c-9401-a7fcdf5836fd\",\"moduleSequenceNumber\":65231}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"the-hub\",\"moduleSequenceNumber\":65231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"the-hub\",\"moduleSequenceNumber\":65191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"the-hub\",\"moduleSequenceNumber\":65192}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"the-hub\",\"moduleSequenceNumber\":65193}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":65194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":65195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"the-hub\",\"moduleSequenceNumber\":65196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":65197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":176482568,\"moneyMax\":4412064200,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":296,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"34.0.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"comptek\",\"moduleSequenceNumber\":88719}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"comptek\",\"moduleSequenceNumber\":88720}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"comptek\",\"moduleSequenceNumber\":88721}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"comptek\",\"moduleSequenceNumber\":88722}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"comptek\",\"moduleSequenceNumber\":88723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"comptek\",\"moduleSequenceNumber\":88724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"comptek\",\"moduleSequenceNumber\":88725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":88726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":246003210,\"moneyMax\":6150080250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":358,\"serverGrowth\":46}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-747114.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[32,1,1,36,37,19],[40,10,28,15,20,49],[23,26,16,36,42,49],[38,5,11,10,25,19],[10,36,16,38,38,25],[31,37,43,32,46,48],[44,20,19,15,48,24],[46,33,50,6,14,31],[50,19,40,1,21,9],[8,50,37,10,41,15],[6,9,30,13,10,34],[43,13,38,38,19,20],[40,25,48,9,36,31],[43,44,2,49,2,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"29.9.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/3649aba3-0c7b-4f2c-acdd-172cdfb08e1d\",\"moduleSequenceNumber\":88692},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/d7d6cc71-7cb0-4a49-80df-5a604bc5579f\",\"moduleSequenceNumber\":88691},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/04ac722e-a9b0-4364-8592-1c79e6a65da6\",\"moduleSequenceNumber\":88718}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"netlink\",\"moduleSequenceNumber\":88718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"netlink\",\"moduleSequenceNumber\":88687}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"netlink\",\"moduleSequenceNumber\":88688}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"netlink\",\"moduleSequenceNumber\":88689}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"netlink\",\"moduleSequenceNumber\":88690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"netlink\",\"moduleSequenceNumber\":88691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"netlink\",\"moduleSequenceNumber\":88692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":88693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":395,\"serverGrowth\":72}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"34.0.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":65240}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":65241}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":65242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":65243}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":65244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":65245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":65246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":65247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":71872226,\"moneyMax\":1796805650,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":269,\"serverGrowth\":46}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"70.3.8.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"n00dles\",\"moduleSequenceNumber\":59159}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"n00dles\",\"moduleSequenceNumber\":59160}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"n00dles\",\"moduleSequenceNumber\":59161}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"n00dles\",\"moduleSequenceNumber\":59162}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":59163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":59164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"n00dles\",\"moduleSequenceNumber\":59165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":59166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"88.3.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/89eb2610-cb19-41ea-b116-2f11efc0313e\",\"moduleSequenceNumber\":59181},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/1d6b65a7-a1d3-4e36-b40c-f2b194475da8\",\"moduleSequenceNumber\":59180},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/e9fcb378-2ab2-40d5-aba7-650f4cc960be\",\"moduleSequenceNumber\":59183}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":59182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":108660.69564855931,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113352-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,1,0,0],[1,0,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,1,0]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"18.9.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/82af0926-eb5c-4865-aea5-910158baacc8\",\"moduleSequenceNumber\":60814},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/c4943ba7-e84d-4d61-b394-ff0b04852abe\",\"moduleSequenceNumber\":60813},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/8fe1e0e6-4028-439a-aea3-59c180e7ca2a\",\"moduleSequenceNumber\":60816}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":60816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":60809}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":60810}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":60811}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":60812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":60813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":60814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":60815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":27.310000000000002,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"37.6.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/07b10674-56e8-4ea4-9dc8-cb6903133208\",\"moduleSequenceNumber\":60831},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/7e3b9ab3-3438-4922-890e-22195f215982\",\"moduleSequenceNumber\":60830},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/72d6fe8b-595f-41d8-80d9-bdcd9d07543f\",\"moduleSequenceNumber\":60833}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"joesguns\",\"moduleSequenceNumber\":60833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"joesguns\",\"moduleSequenceNumber\":60826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"joesguns\",\"moduleSequenceNumber\":60827}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"joesguns\",\"moduleSequenceNumber\":60828}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":60829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":60830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"joesguns\",\"moduleSequenceNumber\":60831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":60832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":28.922,\"minDifficulty\":5,\"moneyAvailable\":1070.3882020641968,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"4.7.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/10462b97-7698-4aeb-a535-7e02dee949dd\",\"moduleSequenceNumber\":60950},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/4e3f84c7-9789-44ff-af1f-df930f015140\",\"moduleSequenceNumber\":60949},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/f40c7d35-84c9-48d3-b87e-7189bb12720d\",\"moduleSequenceNumber\":60952}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"zer0\",\"moduleSequenceNumber\":60952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"zer0\",\"moduleSequenceNumber\":60945}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"zer0\",\"moduleSequenceNumber\":60946}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"zer0\",\"moduleSequenceNumber\":60947}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"zer0\",\"moduleSequenceNumber\":60948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zer0\",\"moduleSequenceNumber\":60949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"zer0\",\"moduleSequenceNumber\":60950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":60951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"87.9.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/542b5ab0-b445-4155-bfc4-9ffc7dd86157\",\"moduleSequenceNumber\":60916},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/1ab80054-b4c3-486c-ae00-3b2a0da418d1\",\"moduleSequenceNumber\":60915},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/f81da9d4-455b-49a9-b174-fe60d0bb36ef\",\"moduleSequenceNumber\":60918}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"nectar-net\",\"moduleSequenceNumber\":60918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":60911}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"nectar-net\",\"moduleSequenceNumber\":60912}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"nectar-net\",\"moduleSequenceNumber\":60913}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":60914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":60915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"nectar-net\",\"moduleSequenceNumber\":60916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":60917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"91.3.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/00f3f875-8af6-4273-a0a6-ec7843c7be24\",\"moduleSequenceNumber\":60967},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/f2d77f1e-8ebe-477a-8213-9e1c481a39b0\",\"moduleSequenceNumber\":60966},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/e431b868-597f-49cd-819c-e6a3b61f5a76\",\"moduleSequenceNumber\":60969}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"neo-net\",\"moduleSequenceNumber\":60969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"neo-net\",\"moduleSequenceNumber\":60962}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"neo-net\",\"moduleSequenceNumber\":60963}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"neo-net\",\"moduleSequenceNumber\":60964}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":60965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":60966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"neo-net\",\"moduleSequenceNumber\":60967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":60968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"1.1.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/5bd66a96-30fb-4132-adf6-e3ac495c8ac0\",\"moduleSequenceNumber\":65229},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/eb4adc4e-ad9c-4c49-affc-06b2bbcb83cb\",\"moduleSequenceNumber\":65228},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/4bf7c560-9066-45f2-a897-4fca7011bcac\",\"moduleSequenceNumber\":65249}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65224}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65225}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":65230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"68.0.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/e68b3ddc-a95c-4116-b528-2dc0bee788c5\",\"moduleSequenceNumber\":60848},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/831e5ce4-b2da-4485-af23-c2db0ca5cf92\",\"moduleSequenceNumber\":60847},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/5fb5d638-d089-4179-85eb-0b2e4319d4bc\",\"moduleSequenceNumber\":60850}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":60850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":60843}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":60844}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":60845}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":60846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":60847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":60848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":60849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":145936.98886996106,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"48.3.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/7a777405-ea10-4934-b51b-d3d73352fb78\",\"moduleSequenceNumber\":60865},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/ca52c684-92f0-4a1f-b766-6afe540aec68\",\"moduleSequenceNumber\":60864},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/5cd7f1fc-8180-4ed0-a872-9e400ededdec\",\"moduleSequenceNumber\":60867}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":60867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":60860}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":60861}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":60862}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":60863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":60864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":60865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":60866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":22.166,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-667801.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)a(()))a)(\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"97.5.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/0c24c1d4-622c-4f7f-9b9e-dc2c1cb314cd\",\"moduleSequenceNumber\":65221},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/4c934aaf-ef43-4702-9b1f-8e7afd3330f4\",\"moduleSequenceNumber\":65220},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/73372197-a6a2-4b35-8a6a-1bb30f289ea8\",\"moduleSequenceNumber\":65248}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"phantasy\",\"moduleSequenceNumber\":65248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"phantasy\",\"moduleSequenceNumber\":65216}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"phantasy\",\"moduleSequenceNumber\":65217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"phantasy\",\"moduleSequenceNumber\":65218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":65219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":65220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"phantasy\",\"moduleSequenceNumber\":65221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":65222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"25.5.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/46e7c11a-5681-455e-be6a-8cec81d6b2a3\",\"moduleSequenceNumber\":60899},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/1ec9d096-8992-4217-9da1-71a188d4c0de\",\"moduleSequenceNumber\":60898},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/fef95d0f-c277-4b2c-bab3-f900dc21f919\",\"moduleSequenceNumber\":60901}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"max-hardware\",\"moduleSequenceNumber\":60901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":60894}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"max-hardware\",\"moduleSequenceNumber\":60895}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"max-hardware\",\"moduleSequenceNumber\":60896}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":60897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":60898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"max-hardware\",\"moduleSequenceNumber\":60899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":60900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"5.6.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/dd25b9c7-caa7-43c6-8538-1e7261264e4b\",\"moduleSequenceNumber\":65188},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/4ab8a93b-0d9c-427c-a2d2-a681b435ad67\",\"moduleSequenceNumber\":65187},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/0c498122-39ff-4621-9b55-3fd5a136c9a6\",\"moduleSequenceNumber\":65214}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"omega-net\",\"moduleSequenceNumber\":65214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"omega-net\",\"moduleSequenceNumber\":65183}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"omega-net\",\"moduleSequenceNumber\":65184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"omega-net\",\"moduleSequenceNumber\":65185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":65186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":65187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"omega-net\",\"moduleSequenceNumber\":65188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":65189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":69294007,\"moneyMax\":1732350175,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":207,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"40.1.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":88752}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":88753}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":88754}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":88755}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":88756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":88757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":88758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":88759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":54842862,\"moneyMax\":1371071550,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":240,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"83.4.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/1b1a79f4-3fa6-4001-9589-0c343f3990a6\",\"moduleSequenceNumber\":60882},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/e2f82276-cef8-430c-850d-705fa71fec21\",\"moduleSequenceNumber\":60881},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/3aa3dbe3-4f16-4b6e-8c04-980a39b8c153\",\"moduleSequenceNumber\":60884}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"iron-gym\",\"moduleSequenceNumber\":60884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":60877}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"iron-gym\",\"moduleSequenceNumber\":60878}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"iron-gym\",\"moduleSequenceNumber\":60879}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":60880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":60881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"iron-gym\",\"moduleSequenceNumber\":60882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":60883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":100,\"minDifficulty\":10,\"moneyAvailable\":71074.30045804502,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"6.2.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":489,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-167416.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[4,9],[5,5,8],[2,9,4,7],[9,8,6,2,7],[6,8,1,5,5,1],[6,2,9,9,2,1,2],[7,9,3,4,2,2,1,4],[2,4,5,2,7,1,9,3,4],[5,6,7,5,8,8,2,1,5,4],[6,5,8,9,7,3,5,7,9,8,7],[6,2,5,2,3,4,8,1,1,4,4,6]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"37.5.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1069,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"82.0.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":762,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"16.4.3.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":510,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"54.0.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/de27b374-560e-4a79-bae4-4570be9e8126\",\"moduleSequenceNumber\":88792},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/a2810add-399e-4c5d-a5db-42eaa65c0036\",\"moduleSequenceNumber\":88791},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/053c773f-6144-4fb8-b0f6-f0174250b7db\",\"moduleSequenceNumber\":88794}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":88794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":88787}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":88788}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":88789}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":88790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":88791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":88792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":88793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"13.1.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/3a5810d6-9351-4603-addf-9ed7a1f2daae\",\"moduleSequenceNumber\":88775},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/9024470b-aa99-4e17-9f5e-d47c4822e045\",\"moduleSequenceNumber\":88774},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/8e53373d-ca39-4fd4-8bd1-f9a42d13498b\",\"moduleSequenceNumber\":88777}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":88777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":88770}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":88771}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":88772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":88773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":88774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":88775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":88776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"28.6.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":505,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"90.1.9.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:https://danielyxie.github.io/4ff45f09-670f-4698-b81f-62f46f868c8a\",\"moduleSequenceNumber\":60933},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:https://danielyxie.github.io/617143bd-4e3e-4708-8e9f-0c52ae75345f\",\"moduleSequenceNumber\":60932},{\"filename\":\"root-spread.js\",\"url\":\"blob:https://danielyxie.github.io/95860575-af80-49b3-aa73-a5d64e2ad3b3\",\"moduleSequenceNumber\":60935}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"CSEC\",\"moduleSequenceNumber\":60935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"CSEC\",\"moduleSequenceNumber\":60928}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\"\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"spread_and_self_att.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"CSEC\",\"moduleSequenceNumber\":60929}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// 1. Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// 2. runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t/// 3. orders auto-attack\\n\\t\\t// calculate threads\\n\\t\\tlet availableRam = ns.getServerMaxRam(targetServer) - ns.getServerUsedRam(targetServer); // returns: int\\n\\t\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\t\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\t\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\n\\t\\t// execute self-attack of target\\n// FIXME ==> script does not run attacks on all servers\\n// there is a sucpicous logs for copying\\n\\t\\tns.exec(\\\"/1_hack/standard.js\\\", targetServer, THREADS, targetServer, THREADS) \\n\\t}\\n}\",\"filename\":\"att_network_themselves.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"CSEC\",\"moduleSequenceNumber\":60930}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":60931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":60932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"backdoor-spread.js\\\",\\n\\t\\t\\t\\\"spread_and_self_att.js\\\",\\n\\t\\t\\t\\\"att_network_themselves.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\t\\t\\t\\n\\t\\t];\\n\\t\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"CSEC\",\"moduleSequenceNumber\":60933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":60934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"14.7.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"12.6.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":89.9963,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.9796,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0437,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0307,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.026,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":1.0105,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":592.1226080756252}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":113.5524,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":8587.1842569376}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":2.2091,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":200.1355,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":20867.549713538294}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":92.788,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":15211.99890462687}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":386.5470971965052}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":65.9246,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":5078.084928559188}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":23854.203421832975,\"lastPrice\":23938.474048986332,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":false,\"otlkMag\":20.18997910344509,\"otlkMagForecast\":31.45807576387885,\"cap\":63582846,\"spreadPerc\":0.4,\"shareTxForMovement\":51842,\"shareTxUntilMovement\":51842,\"totalShares\":138700000,\"maxShares\":27700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":25509.496072716698,\"lastPrice\":25417.868882929728,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":16.607338011082884,\"otlkMagForecast\":32.88387170389985,\"cap\":302120631,\"spreadPerc\":0.3,\"shareTxForMovement\":87107,\"shareTxUntilMovement\":87107,\"totalShares\":81300000,\"maxShares\":16300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":36194.08101205927,\"lastPrice\":36389.791475355676,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":15.406425877083178,\"otlkMagForecast\":34.23477985698679,\"cap\":417500227,\"spreadPerc\":0.4,\"shareTxForMovement\":44104,\"shareTxUntilMovement\":44104,\"totalShares\":70800000,\"maxShares\":14200000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":11459.364574492352,\"lastPrice\":11402.640196951075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":13.620580169145764,\"otlkMagForecast\":61.17075573339839,\"cap\":200176743,\"spreadPerc\":0.4,\"shareTxForMovement\":44630,\"shareTxUntilMovement\":44630,\"totalShares\":141300000,\"maxShares\":28300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":49185.79751833238,\"lastPrice\":49412.74999116695,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":9.81486466812558,\"otlkMagForecast\":38.98868139225508,\"cap\":495064198,\"spreadPerc\":0.6,\"shareTxForMovement\":66765,\"shareTxUntilMovement\":66765,\"totalShares\":43400000,\"maxShares\":8700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":43465.99460043514,\"lastPrice\":43154.8623977035,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":14.096767638586524,\"otlkMagForecast\":62.52294685938708,\"cap\":1191759187,\"spreadPerc\":0.8,\"shareTxForMovement\":88969,\"shareTxUntilMovement\":88969,\"totalShares\":36200000,\"maxShares\":7200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":10654.847726307293,\"lastPrice\":10595.264825046568,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":11.266517369274238,\"otlkMagForecast\":39.4371737262177,\"cap\":271050787,\"spreadPerc\":0.3,\"shareTxForMovement\":35608,\"shareTxUntilMovement\":35608,\"totalShares\":108300000,\"maxShares\":21700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":62201.6612889919,\"lastPrice\":62780.16602916595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":false,\"otlkMag\":11.477620000610377,\"otlkMagForecast\":36.49823417057982,\"cap\":290644959,\"spreadPerc\":0.9,\"shareTxForMovement\":65252,\"shareTxUntilMovement\":65252,\"totalShares\":64600000,\"maxShares\":12900000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":29413.076384183358,\"lastPrice\":29593.326106362063,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":7.4010960890005375,\"otlkMagForecast\":42.24948147299067,\"cap\":402455299,\"spreadPerc\":0.5,\"shareTxForMovement\":60831,\"shareTxUntilMovement\":60831,\"totalShares\":52000000,\"maxShares\":10400000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":6453.603011909497,\"lastPrice\":6482.450577111555,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":11.261983177356571,\"otlkMagForecast\":40.525690433356125,\"cap\":137277060,\"spreadPerc\":0.7,\"shareTxForMovement\":49089,\"shareTxUntilMovement\":49089,\"totalShares\":86100000,\"maxShares\":17200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":18238.660170204534,\"lastPrice\":18156.193099192435,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":9.299619701120658,\"otlkMagForecast\":58.1104397766419,\"cap\":114201974,\"spreadPerc\":0.2,\"shareTxForMovement\":52076,\"shareTxUntilMovement\":52076,\"totalShares\":66100000,\"maxShares\":13200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":8487.597936967364,\"lastPrice\":8438.92446636359,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.853790480818995,\"otlkMagForecast\":56.16676631457409,\"cap\":51854783,\"spreadPerc\":0.7,\"shareTxForMovement\":38492,\"shareTxUntilMovement\":38492,\"totalShares\":123500000,\"maxShares\":24700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":11565.665572403079,\"lastPrice\":11620.699409420295,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":8.24900064431397,\"otlkMagForecast\":42.40919243391616,\"cap\":228008671,\"spreadPerc\":0.8,\"shareTxForMovement\":99824,\"shareTxUntilMovement\":99824,\"totalShares\":59200000,\"maxShares\":11800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":37375.05108225028,\"lastPrice\":37230.10607479582,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":10.906031933214232,\"otlkMagForecast\":59.17394662463181,\"cap\":654387515,\"spreadPerc\":0.9,\"shareTxForMovement\":73277,\"shareTxUntilMovement\":73277,\"totalShares\":31700000,\"maxShares\":6300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":10325.827299998722,\"lastPrice\":10279.13852323217,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":6.383809466049775,\"otlkMagForecast\":44.0530204779137,\"cap\":34506734,\"spreadPerc\":0.3,\"shareTxForMovement\":110314,\"shareTxUntilMovement\":110314,\"totalShares\":46700000,\"maxShares\":9300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":11776.656767599983,\"lastPrice\":11831.845523218015,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":6.6807804469734915,\"otlkMagForecast\":55.49228538615456,\"cap\":199210126,\"spreadPerc\":0.7,\"shareTxForMovement\":59467,\"shareTxUntilMovement\":59467,\"totalShares\":68600000,\"maxShares\":13700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":33464.17043089682,\"lastPrice\":33288.96868555013,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":9.28862274751269,\"otlkMagForecast\":58.20192463346169,\"cap\":157386584,\"spreadPerc\":0.7,\"shareTxForMovement\":100090,\"shareTxUntilMovement\":100090,\"totalShares\":25600000,\"maxShares\":5100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":22108.29616661307,\"lastPrice\":22205.52617794199,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":11.180317919841807,\"otlkMagForecast\":38.03430435021831,\"cap\":512034287,\"spreadPerc\":0.5,\"shareTxForMovement\":110238,\"shareTxUntilMovement\":110238,\"totalShares\":32900000,\"maxShares\":6600000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":21884.98333405757,\"lastPrice\":21761.040342905213,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.665623909934647,\"otlkMagForecast\":56.7960503312287,\"cap\":108617659,\"spreadPerc\":0.6,\"shareTxForMovement\":71394,\"shareTxUntilMovement\":71394,\"totalShares\":27400000,\"maxShares\":5500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":2745.2162372046605,\"lastPrice\":2794.894397897927,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.51,\"b\":true,\"otlkMag\":6.301461497988787,\"otlkMagForecast\":52.620471524199374,\"cap\":115668560,\"spreadPerc\":1.1,\"shareTxForMovement\":38991,\"shareTxUntilMovement\":38991,\"totalShares\":95400000,\"maxShares\":19100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7624.770768141409,\"lastPrice\":7561.532056370527,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.16,\"b\":true,\"otlkMag\":5.315299373961435,\"otlkMagForecast\":52.38980944246755,\"cap\":14435713,\"spreadPerc\":0.5,\"shareTxForMovement\":46857,\"shareTxUntilMovement\":46857,\"totalShares\":59200000,\"maxShares\":11800000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5915.605664378744,\"lastPrice\":5892.664223971504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":1.5567382764845596,\"otlkMagForecast\":51.76558746296175,\"cap\":43322222,\"spreadPerc\":0.7,\"shareTxForMovement\":80865,\"shareTxUntilMovement\":80865,\"totalShares\":27500000,\"maxShares\":5500000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":33766.924744924945,\"lastPrice\":33322.473439247355,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.85,\"b\":true,\"otlkMag\":7.5895999103390945,\"otlkMagForecast\":58.81173871701578,\"cap\":72433417,\"spreadPerc\":0.9,\"shareTxForMovement\":71763,\"shareTxUntilMovement\":71763,\"totalShares\":40900000,\"maxShares\":8200000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":2829.974474536847,\"lastPrice\":2796.1073480281816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":true,\"otlkMag\":5.561957759311143,\"otlkMagForecast\":54.5123951236664,\"cap\":9997801,\"spreadPerc\":0.9,\"shareTxForMovement\":68970,\"shareTxUntilMovement\":68970,\"totalShares\":42600000,\"maxShares\":8500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4515.72784485905,\"lastPrice\":4547.3080336268595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":true,\"otlkMag\":5.579376093654317,\"otlkMagForecast\":56.65109424252657,\"cap\":71766845,\"spreadPerc\":1.1,\"shareTxForMovement\":99888,\"shareTxUntilMovement\":99888,\"totalShares\":43300000,\"maxShares\":8700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3665.521742263018,\"lastPrice\":3571.5357578584426,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.65,\"b\":false,\"otlkMag\":5.909302191296479,\"otlkMagForecast\":50.80712231679433,\"cap\":45698028,\"spreadPerc\":0.9,\"shareTxForMovement\":53317,\"shareTxUntilMovement\":53317,\"totalShares\":23000000,\"maxShares\":4600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1104.409813260445,\"lastPrice\":1112.8499862828164,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":true,\"otlkMag\":4.990236050770973,\"otlkMagForecast\":54.1350900687264,\"cap\":34089343,\"spreadPerc\":1.2,\"shareTxForMovement\":47981,\"shareTxUntilMovement\":47981,\"totalShares\":24700000,\"maxShares\":4900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1324.7877910070881,\"lastPrice\":1331.6647120973234,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":5.017841057023277,\"otlkMagForecast\":48.80643359366284,\"cap\":18544325,\"spreadPerc\":1,\"shareTxForMovement\":167077,\"shareTxUntilMovement\":167077,\"totalShares\":29500000,\"maxShares\":5900000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2666.6444872409907,\"lastPrice\":2695.098404415969,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.48,\"b\":false,\"otlkMag\":5.726515709978301,\"otlkMagForecast\":47.01738003682752,\"cap\":20243920,\"spreadPerc\":0.6,\"shareTxForMovement\":25043,\"shareTxUntilMovement\":25043,\"totalShares\":18300000,\"maxShares\":3700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1773.265820416063,\"lastPrice\":1744.3407522786708,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.3,\"b\":false,\"otlkMag\":6.5686248672002225,\"otlkMagForecast\":47.28639757548544,\"cap\":16123585,\"spreadPerc\":1.2,\"shareTxForMovement\":17341,\"shareTxUntilMovement\":17341,\"totalShares\":52200000,\"maxShares\":10400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1686.589779291683,\"lastPrice\":1670.8095441418097,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":true,\"otlkMag\":11.216549715206687,\"otlkMagForecast\":60.75418650406631,\"cap\":12083041,\"spreadPerc\":0.6,\"shareTxForMovement\":57412,\"shareTxUntilMovement\":57412,\"totalShares\":148600000,\"maxShares\":29700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":12469.449023103762,\"lastPrice\":12538.672469383206,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":8.58617072192469,\"otlkMagForecast\":41.00304931257919,\"cap\":114828589,\"spreadPerc\":0.7,\"shareTxForMovement\":172413,\"shareTxUntilMovement\":172413,\"totalShares\":18600000,\"maxShares\":3700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":11325.461660689676,\"lastPrice\":11284.781898845265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":11.453895823068065,\"otlkMagForecast\":60.96492432378504,\"cap\":314348602,\"spreadPerc\":0.6,\"shareTxForMovement\":207294,\"shareTxUntilMovement\":207294,\"totalShares\":29500000,\"maxShares\":5900000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":53666,\"lastUpdate\":1644778968788,\"ticksUntilCycle\":64}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"de\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-2,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644778970917","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644778970940"}}