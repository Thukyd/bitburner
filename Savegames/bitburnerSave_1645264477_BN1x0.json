{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":798,\"hp\":15,\"max_hp\":15,\"strength\":60,\"defense\":52,\"dexterity\":83,\"agility\":55,\"charisma\":140,\"intelligence\":0,\"hacking_chance_mult\":1.4362651991475277,\"hacking_speed_mult\":1.4290920658182844,\"hacking_money_mult\":2.247217658530145,\"hacking_grow_mult\":1.4803805392161695,\"hacking_exp\":71238369.2937875,\"strength_exp\":1541.7411282621179,\"defense_exp\":1541.7411282621179,\"dexterity_exp\":1541.7411282621179,\"agility_exp\":1541.7411282621179,\"charisma_exp\":8013.727984836714,\"intelligence_exp\":0,\"hacking_mult\":2.110163854787552,\"strength_mult\":1.361950096078876,\"defense_mult\":1.1843044313729356,\"dexterity_mult\":1.8876628331653218,\"agility_mult\":1.2435196529415824,\"charisma_mult\":1.563281849412275,\"hacking_exp_mult\":2.785875731279822,\"strength_exp_mult\":1.4981451056867634,\"defense_exp_mult\":1.4981451056867634,\"dexterity_exp_mult\":1.4981451056867634,\"agility_exp_mult\":1.4981451056867634,\"charisma_exp_mult\":1.4981451056867634,\"company_rep_mult\":1.9775515395065282,\"faction_rep_mult\":1.4981451056867636,\"money\":77709421745.73956,\"city\":\"Sector-12\",\"location\":\"MegaCorp\",\"jobs\":{\"MegaCorp\":\"IT Intern\"},\"companyName\":\"MegaCorp\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394847.2000059019,\"ram\":64,\"totalMoneyGenerated\":9376099388.687088,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394846.60000590194,\"ram\":64,\"totalMoneyGenerated\":9375512755.785734,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394846.2000059019,\"ram\":64,\"totalMoneyGenerated\":9374999388.080938,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394845.60000590194,\"ram\":64,\"totalMoneyGenerated\":9374572342.968277,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394845.2000059019,\"ram\":64,\"totalMoneyGenerated\":9106785947.089146,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394844.60000590194,\"ram\":64,\"totalMoneyGenerated\":9106426928.286953,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394844.2000059019,\"ram\":64,\"totalMoneyGenerated\":9106090697.327639,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394843.60000590194,\"ram\":64,\"totalMoneyGenerated\":9105774383.981575,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394843.2000059019,\"ram\":64,\"totalMoneyGenerated\":9105477299.176537,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394842.60000590194,\"ram\":64,\"totalMoneyGenerated\":9105189582.346468,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":394842.2000059019,\"ram\":64,\"totalMoneyGenerated\":9104920233.707365,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27394.029319350866,\"onlineTimeSeconds\":393476.20000590314,\"ram\":64,\"totalMoneyGenerated\":9104650658.845207,\"name\":\"hacknet-node-11\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Netburners\",\"The Black Hand\",\"Tian Di Hui\",\"CyberSec\",\"MegaCorp\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"}],\"augmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1843044313729356,\"crime_success_mult\":1.1843044313729356,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"MegaCorp\",\"currentWorkFactionDescription\":\"carrying out field missions\",\"workHackExpGainRate\":0.2785875731279822,\"workStrExpGainRate\":0.14981451056867634,\"workDefExpGainRate\":0.14981451056867634,\"workDexExpGainRate\":0.14981451056867634,\"workAgiExpGainRate\":0.14981451056867634,\"workChaExpGainRate\":0.14981451056867634,\"workRepGainRate\":0.2987070856876994,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":2866.9447150594174,\"workStrExpGained\":1541.7411282621179,\"workDefExpGained\":1541.7411282621179,\"workDexExpGained\":1541.7411282621179,\"workAgiExpGained\":1541.7411282621179,\"workChaExpGained\":1541.7411282621179,\"workRepGained\":2812.4984403064113,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":500,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":2058200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3027348745102292,\"hacknet_node_money_mult\":2.9869268044629855,\"hacknet_node_purchase_cost_mult\":0.644851542938704,\"hacknet_node_ram_cost_mult\":0.8429431933839266,\"hacknet_node_core_cost_mult\":0.8429431933839266,\"hacknet_node_level_cost_mult\":0.7165017143763376,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1645264476633,\"totalPlaytime\":1462494400,\"playtimeSinceLastAug\":394886600,\"playtimeSinceLastBitnode\":1462494400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":22507669894.747765,\"hacknet\":110346499594.84,\"hacknet_expenses\":-4091813662.344566,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":77708421745.73956,\"work\":14632318.110452512,\"servers\":-41763916399.73962,\"other\":-5308400000,\"augmentations\":-3996250000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4002000,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":25069982391.31251,\"hacknet\":221195421715.46033,\"hacknet_expenses\":-31298009174.66596,\"hospitalization\":-28218000,\"infiltration\":0,\"sleeves\":0,\"stock\":-31199309929.589535,\"total\":84504540451.41206,\"work\":66552092.10913508,\"servers\":-53911760676.051956,\"other\":-10590800000,\"augmentations\":-34795315883.12271}},\"scriptProdSinceLastAug\":5880637223.123859,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1643885384244},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1643894920823},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1643900797590},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1643906299108},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643911675318},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1643924584948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1643960666103},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643963802896},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643998639673},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644042685265},{\"ID\":\"TOR\",\"unlockedOn\":1644053943665},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1644141194118},{\"ID\":\"NITESEC\",\"unlockedOn\":1644163099111},{\"ID\":\"4S\",\"unlockedOn\":1644176737287},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644187629240},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1644218881854},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1644300547385},{\"ID\":\"DONATION\",\"unlockedOn\":1644744654198},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1644784347638},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1644784347660},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1644787752275}],\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"28.9.0.8\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"HTTPWorm.exe-3.52%-INC\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet servers = ns.scan();\\n\\n\\tfor (let server of servers) {\\n\\t\\tns.killall(server)\\n\\t\\tns.tprint(`INFO: killed all scripts on ${server}`)\\n\\t}\\n}\",\"filename\":\"/kill_scripts/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/kill_scripts/main.js\",\"url\":\"blob:https://danielyxie.github.io/6aebf27f-cb36-4c09-8309-a71dbb78230b\",\"moduleSequenceNumber\":3009}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///dc67d4b7-6306-4582-bb50-08652a2a61ec\",\"moduleSequenceNumber\":192}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\\n\\nexport async function main(ns, target) {\\n\\tawait moveScripts(ns, target)\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///ff32253e-4372-4154-ae1d-959b9e33d7e6\",\"moduleSequenceNumber\":1754}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":4359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as TIER} from \\\"2_hacknet/tier-orchestration.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t/// RUN THE loop and execute the prefered scaling method\\n\\tlet stillUpgrading = false;\\n\\n\\twhile(!stillUpgrading) {\\n\\t\\tstillUpgrading = await TIER(ns) // Orchstrate by Tier System\\n\\t\\tawait ns.sleep(500)\\n\\t}\\n\\n\\tns.tprint(`ERROR: MAX NODES OF ${ns.hacknet.numNodes()} REACHED`)\\n}\",\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/2_hacknet/tier-orchestration.js\",\"url\":\"blob:file:///9d37b3df-7d19-441e-85ea-4e7c58cbebb3\",\"moduleSequenceNumber\":104},{\"filename\":\"/2_hacknet/orchestrate_cluster.js\",\"url\":\"blob:file:///18c607f6-9de7-4d68-9030-9cdaa6052632\",\"moduleSequenceNumber\":191}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TARGET = \\\"foodnstuff\\\"; //\\\"n00dles\\\"\\n\\n\\t// NS1:\\n\\t//For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n\\tlet growTimes = ns.growthAnalyze(TARGET, 2);\\n\\t//If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n\\n\\tns.tprint(`TEST: ns.growthAnalyze(TARGET, 2) returns ${growTimes}`)\\n\\n\\t////////////////////////////////////\\n\\n\\tlet growth = ns.getServerGrowth(TARGET)\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET)\\n\\tlet availableMoney =ns.getServerMoneyAvailable(TARGET)\\n\\n\\tns.tprint(`INFO: BEFORE Rate = ${growth}, ${availableMoney.toLocaleString('de-DE')} of  ${maxMoney.toLocaleString('de-DE')}`)\\n\\tawait ns.grow(TARGET);\\n\\tgrowth = ns.getServerGrowth(TARGET);\\n\\tavailableMoney =ns.getServerMoneyAvailable(TARGET);\\n\\tns.tprint(`INFO: AFTER Rate = ${growth}, ${availableMoney.toLocaleString('de-DE')} of  ${maxMoney.toLocaleString('de-DE')}`)\\n\\t\\n\\n\\t/////////\\n\\t// a) don't push over omney limit\\n\\t// b) start growth if under certain % of money level\\n\\t// c) estimate how much growth operations to grow until x% of growth\\n\\n\\t// Configuration variables\\n\\tlet min_percentage = 0.5; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\n\\n\\t\\n\\t\\n}\",\"filename\":\"/1_hack/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/test.js\",\"url\":\"blob:https://danielyxie.github.io/bd73d23c-f00a-406e-91e5-f08c8b6b81d4\",\"moduleSequenceNumber\":30778}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"att_specific.js\",\"url\":\"blob:file:///7b659042-c698-47ef-a793-afb4f566db3f\",\"moduleSequenceNumber\":1512}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///ca2dd453-ccd7-4ee3-8f18-151e26903272\",\"moduleSequenceNumber\":116},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///d62da5c4-8401-4b70-b790-33e1c1f7ba4e\",\"moduleSequenceNumber\":119},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///f8c0164b-203e-4a4e-8eba-dd6af7b20a5e\",\"moduleSequenceNumber\":340}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":4245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * @param {NS} ns\\n * @returns {Object[]} cluster information as name, gb, ram etc. \\n **/\\nasync function getClusterData(ns) {\\n\\tlet nodeCount = ns.hacknet.numNodes()\\n\\t// there is no node yet\\n\\tif (nodeCount == 0) {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet cluster = []\\n\\tfor (let i = 0; i < nodeCount; i++) {\\n\\t\\tlet singleNode = await ns.hacknet.getNodeStats(i);\\n\\t\\tcluster.push(singleNode)\\n\\t}\\n\\n\\treturn cluster;\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} nodeNum \\n * @returns {Object[]} the first \\\"nodeNum\\\" of the cluster information\\n **/\\nasync function getXNodes(clusterData, nodeNum) {\\n\\treturn await clusterData.slice(0, nodeNum);\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxLevel  \\n * @returns {Object[]} a sorted array of nodes which did not reach maxLevel yet\\n **/\\nasync function nodesByMinLevel(clusterData, maxLevel) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.level > b.level) ? 1 : -1) // sorted by min level => buy low levels first\\n\\t\\t.filter(node => node.level < maxLevel)\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxRam \\n * @returns {Object[]} a sorted array of nodes which did not reach maxRam  yet\\n **/\\nasync function nodesByMinRam(clusterData, maxRam) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.ram > b.ram) ? 1 : -1) // sorted by min ram => buy low ram first\\n\\t\\t.filter(node => node.ram < maxRam)\\n\\t\\t\\n}\\n\\n/** \\n * @param {Object[]} Cluster information\\n * @param {Number} maxRam \\n * @returns {Object[]} a sorted array of nodes which did not reach maxCores  yet\\n **/\\nasync function nodesByMinCores(clusterData, maxCores) {\\n\\treturn await clusterData\\n\\t\\t.sort((a, b) => (a.cores > b.cores) ? 1 : -1) // sorted by min cores => buy low amount cores first\\n\\t\\t.filter(node => node.cores < maxCores)\\n}\\n\\n/** \\n * Loop to buy nodes until you are out of money or the max is reached\\n * @param {NS} ns \\n * @param {Number} maxNodestoBuy \\n **/\\nasync function buyNumNodes(ns, maxNodesToBuy) {\\n\\tns.print(\\\"INFO: buyNumNodes() check\\\")\\n\\tlet numNodes = ns.hacknet.numNodes();\\n\\tlet money =  Math.floor(ns.getPlayer().money) - 1; // -1 to avoid rounding errors\\n\\tlet price =  Math.floor(ns.hacknet.getPurchaseNodeCost());\\n\\n\\tif (numNodes < maxNodesToBuy && money > price) {\\n\\t\\tlet nodeName = ns.hacknet.purchaseNode();\\n\\t\\tns.tprint(`INFO: Purchased hacknet-node-${nodeName}`);\\n\\t}\\n}\\n\\n/**\\n * - Loop to buy ram until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumRam(ns, cluster) {\\n\\t// check if there are clusters which do not have the max ram\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more RAM to nodes because defined 'maxRamToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeRam(nodeIndex , 1) // buy ram\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to ${cluster[0].ram} ram`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n/**\\n * - Loop to buy level until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumLevel(ns, cluster) {\\n\\t// check if there are clusters which do not have the max level\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more Level to nodes because defined 'maxLevelToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeLevel(nodeIndex , 10) // buy level\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to level ${ns.hacknet.getNodeStats(nodeIndex).level}`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n/**\\n * - Loop to buy cores until you are out of money or the max is reached\\n * - takes a cluster and \\n * @param {NS} ns \\n * @param {Object[]} cluster information\\n **/\\nasync function buyNumCores(ns, cluster) {\\n\\t// check if there are clusters which do not have the core ram\\n\\tif(cluster.length === 0) {\\n\\t\\tns.print(\\\"INFO: Could not add more cores to nodes because defined 'maxCoresToBuy' was reached already\\\")\\n\\t\\treturn false\\n\\t}\\n\\n\\t// try to upgrade ram (cluster is already sorted by the low as index 0)\\n\\tlet nodeIndex = Number(cluster[0].name.replace('hacknet-node-','')) // get index\\n\\tlet upgraded = await ns.hacknet.upgradeCore(nodeIndex , 1) // buy ram\\n\\tif (upgraded) {\\n\\t\\tns.tprint(`INFO: Upgraded ${cluster[0].name} to ${cluster[0].cores + 1} cores`)\\n\\t} else {\\n\\t\\t ns.print(`INFO: Could not upgrade ${cluster[0].name}`)\\n\\t}\\n\\t\\n\\treturn true // upgrades are still possible\\n}\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst CLUSTER = await getClusterData(ns);\\n\\n\\tlet OPERATIONS_LOG = {\\n\\t\\t\\\"max_nodes\\\": 12,\\n\\t\\t\\\"a\\\": false,\\n\\t\\t\\\"b\\\": false,\\n\\t\\t\\\"c\\\" : false,\\n\\t\\t\\\"d\\\" : false,\\n\\t\\t\\\"e\\\" : false,\\n\\t\\t\\\"f\\\" :false,\\n\\t\\t\\\"g\\\" : false,\\n\\t}\\n\\n\\t////////////\\n\\t// a) purchase X nodes\\n\\tif(ns.hacknet.numNodes() < OPERATIONS_LOG.max_nodes)\\t{\\n\\t\\treturn await buyNumNodes(ns, OPERATIONS_LOG.max_nodes)\\n\\t} else {\\n\\t\\tns.print(`INFO: Operation a) | MAX_NODES of ${OPERATIONS_LOG.max_nodes} reached`);\\n\\t\\tOPERATIONS_LOG.a = true;\\n\\t}\\n\\n\\tif(!OPERATIONS_LOG.a){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t////////////\\n\\t// b) upgrade X nodes to 16gb ram\\n\\tlet maxRam = 16\\n\\t// order nodes by min ram\\n\\tlet clusterByRam = await nodesByMinRam(CLUSTER, maxRam);\\n\\t// if there are no upgradable nodes (conditions apply) it returns false\\n\\tlet bStillToBeUpgraded = await buyNumRam(ns, clusterByRam)\\n\\tif (!bStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation b) | relevant nodes fully upgraded to ${maxRam} gb ram`)\\n\\t\\tOPERATIONS_LOG.b = true;\\n\\t}\\n\\t\\n\\tif(!OPERATIONS_LOG.b){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// c) upgrade X nodes to level 100\\n\\tlet maxLevel = 100\\n\\tlet clusterByLevel = await nodesByMinLevel(CLUSTER, maxLevel);\\n\\tlet cStillToBeUpgraded = await buyNumLevel(ns, clusterByLevel);\\n\\tif (!cStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation c) | relevant nodes fully upgraded to level ${maxLevel}`)\\n\\t\\tOPERATIONS_LOG.c = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.c){\\n\\t\\treturn false;\\n\\t}\\n\\n\\n\\t///////////\\n\\t// d) upgrade X nodes to 4 cores\\n\\tlet maxCores = 4\\n\\tlet clusterByCore = await nodesByMinCores(CLUSTER, maxCores);\\n\\tlet dStillToBeUpgraded = await buyNumCores(ns, clusterByCore);\\n\\tif (!dStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation d) | relevant nodes fully upgraded to ${maxCores} cores`)\\n\\t\\tOPERATIONS_LOG.d = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.d){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// e) upgrade X nodes to 64gb ram\\n\\tmaxRam = 64\\n\\t// order nodes by min ram\\n\\tclusterByRam = await nodesByMinRam(CLUSTER, maxRam);\\n\\t// if there are no upgradable nodes (conditions apply) it returns false\\n\\tlet eStillToBeUpgraded = await buyNumRam(ns, clusterByRam)\\n\\tif (!eStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation e) | relevant nodes fully upgraded to ${maxRam} gb ram`)\\n\\t\\tOPERATIONS_LOG.e = true;\\n\\t}\\n\\t\\n\\tif(!OPERATIONS_LOG.e){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// f) upgrade X nodes to level 200\\n\\tmaxLevel = 200\\n\\tclusterByLevel = await nodesByMinLevel(CLUSTER, maxLevel);\\n\\tlet fStillToBeUpgraded = await buyNumLevel(ns, clusterByLevel);\\n\\tif (!fStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation f) | relevant nodes fully upgraded to level ${maxLevel}`)\\n\\t\\tOPERATIONS_LOG.f = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.f){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// g) upgrade X nodes to 16 cores\\n\\tmaxCores = 16\\n\\tclusterByCore = await nodesByMinCores(CLUSTER, maxCores);\\n\\tlet gStillToBeUpgraded = await buyNumCores(ns, clusterByCore);\\n\\tif (!gStillToBeUpgraded) {\\n\\t\\tns.print(`INFO: Operation g) | relevant nodes fully upgraded to ${maxCores} cores`)\\n\\t\\tOPERATIONS_LOG.g = true;\\n\\t}\\n\\tif(!OPERATIONS_LOG.g){\\n\\t\\treturn false;\\n\\t}\\n\\n\\t///////////\\n\\t// h) \\n\\t/// Repeat with next two nodes\\n\\tOPERATIONS_LOG = {\\n\\t\\t\\\"max_nodes\\\": OPERATIONS_LOG.max_nodes + 2,\\n\\t\\t\\\"a\\\": false,\\n\\t\\t\\\"b\\\": false,\\n\\t\\t\\\"c\\\" : false,\\n\\t\\t\\\"d\\\" : false,\\n\\t\\t\\\"e\\\" : false,\\n\\t\\t\\\"f\\\" :false,\\n\\t\\t\\\"g\\\" : false,\\n\\t}\\n\\n// TODO\\n\\t// change to 16\\n\\tif (OPERATIONS_LOG.max_nodes > 18) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\n}\",\"filename\":\"/2_hacknet/tier-orchestration.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet serverRam = ns.getServerUsedRam(targetServer) \\n\\t\\t // imported function\\n\\t\\tif (serverRam > 32) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"backdoor-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":34.5,\"server\":\"home\",\"moduleSequenceNumber\":123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///089e216b-4531-472a-9704-afdfbfb5e8a4\",\"moduleSequenceNumber\":98},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///421df8e3-59b7-4f5a-b250-9011b55088ea\",\"moduleSequenceNumber\":704}],\"dependents\":[],\"ramUsage\":5,\"server\":\"home\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"Todo\\nFix \\\"root-Spread.js\\\"\\n- How can I make it smaller than 4GB => delete 350mb!!\\n\\n- Can I load the getRoot.js \\\"port tools\\\" conditionally from server space?\\n=> light version with small servers\\n=> full version with big servers\\n\\n\\nDo not move scripts in the same step\\n// that in seperate step by creating 2 scripts out of that\\n// probably with tail command\\nawait moveScripts(ns, targetServer)\\n\\n\\nDESCRIPTION\\n- not all possible rooting attacks are working\\n\\t=> never cracks zer0!! not enough ram on n00dles\\n\\tTotal:     4.00GB\\n\\nError\\n[n00dles ~/]> run root-spread.js \\nThis machine does not have enough RAM to run this script with 1 threads. Script requires 4.35GB of RAM\\n\\n\\n\\nSCRIPT RAM \\n\\ngetServer (fn)\\t2.00GB\\nbaseCost (misc)\\t1.60GB\\nexec (fn)\\t1.30GB\\nscp (fn)\\t600.00MB\\nscan (fn)\\t200.00MB\\ngetServerRequiredHackingLevel (fn)\\t100.00MB\\nfileExists (fn)\\t100.00MB\\ngetHackingLevel (fn)\\t50.00MB\\nnuke (fn)\\t50.00MB\\nhasRootAccess (fn)\\t50.00MB\\nbrutessh (fn)\\t50.00MB\\nftpcrack (fn)\\t50.00MB\\nrelaysmtp (fn)\\t50.00MB\\nhttpworm (fn)\\t50.00MB\\nsqlinject (fn)\\t50.00MB\\n\\n\\nROUTE:\\n\\nhome => n00dles => zer0\\n\\n------Root Access: NO, Required hacking skill: 75\\n\\n------Number of open ports required to NUKE: 1\\n\\n------RAM: 32.00GB\\n\\n###################################################\\n\\nSpread Self_Attack\\n- Loop durch die nächsten Netzwerke\\n\\t- Wenn Ram zu gering => continue\\n\\t- Wenn nicht Root Server => continue\\n\\t- Start hack dich selbst\\nFIXME ==> Es werde nicht alle Server gestartet\\n\\t\\t\\tVielleicht ist das Skript auch zu groß um es zu verteilen!\\n==> Alternative => Das Skript nicht auf den Servern, sondern jeweils\\n\\tvon Home aus anfahren lassen\\n\\n###################################################\\nImprove HACK\\n\\n\\n- s) check if the grow gives information about the efficency \\n\\t\\tgrow: Available money on 'iron-gym' grown by 3.888115%. Gained 2.631k hacking exp (t=216).\\n\\t=> logs give a hint in %; 3.88% is quite low => at this point you can attack again\\n\\t=> do not grow from x to y percent, but decide by general growth rate\\n\\t\\t=> if it's very low then reduce growing until it's nearly drained\\n\\t\\t=> if it's high use grow extensiveley\\n\\t- to write this => write a scripts which loops through connected servers\\n\\t\\tcheck the grow rate and see what's low and what's high\\n\\n- b) weaken() only after a couple of tries defiened by chance to crack\\n\\n- c) Hack does not work!!\\n\\nfoodnstuff's security level is 3 of 3\\n\\nReached min security level of foodnstuff: 3 of 3\\n\\nhack: Executing on 'foodnstuff' in 4.700 seconds (t=425)\\n\\nhack: Successfully hacked 'foodnstuff' for $0.000 and 1.072k exp (t=425)\\n\\nERROR: hacking foodnstuff failed.\\nStarting proces to lower security level\\n\\ngetServerMinSecurityLevel: returned 3.000 for foodnstuff\\n\\ngetServerSecurityLevel: returned 3.390 for 'foodnstuff'\\n\\nweaken: Executing on 'foodnstuff' in 18.838 seconds (t=425)\\n\\n\\n###################################################\\nWrite Automatic Nodes \\n=> think about optimizing it\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.046,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-153162.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a))()a))a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"52.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34033205207,\"moneyMax\":850830130175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1161,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"22.8.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46731165938,\"moneyMax\":1168279148450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1117,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-631420-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[177,145,51],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"68.2.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":17493407820,\"moneyMax\":437335195500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1007,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"58.1.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":36070887751,\"moneyMax\":901772193775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1151,\"serverGrowth\":85}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"23.2.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30499046421,\"moneyMax\":762476160525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1105,\"serverGrowth\":80}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"88.8.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":15761908610,\"moneyMax\":394047715250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1126,\"serverGrowth\":75}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-888035.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[2,8],[5,2,4],[1,7,5,7],[7,8,7,2,3],[9,3,6,8,8,9],[7,1,4,4,3,5,4],[7,7,4,1,2,8,8,4],[2,6,3,9,3,6,7,6,1]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"92.2.9.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":17728020489,\"moneyMax\":443200512225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-894930.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[8,4],[5,1,1],[2,7,7,6],[5,5,6,2,9],[2,3,1,8,1,6],[8,8,2,9,1,8,7],[1,8,6,6,1,1,6,7]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-154889-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":44,\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"88.6.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":19833245596,\"moneyMax\":495831139900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1194,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"10.9.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22566845949,\"moneyMax\":564171148725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1219,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688812.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,10,9,7,6,7,1,6,1,5,1,1,9,6,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"81.9.5.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1637305440,\"moneyMax\":40932636000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1231,\"serverGrowth\":83}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"95.0.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1268,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-644143.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,1,0,0,1,1],[0,0,1,0,1,0,1,0,0,0,1,0],[1,0,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,1,1,0,0],[0,1,0,0,0,1,0,0,0,0,0,0],[1,0,0,1,0,0,0,0,0,0,1,0],[0,0,1,0,0,0,1,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,1,1,0,0,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621188.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[10,5,0,-5,2,-8,-2,-3,-1,-6,-2,9,-10,-3,1,-8,7,2,-2,-7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"37.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1176018415,\"moneyMax\":29400460375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":92}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-429251.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[108,40,39,179,200,182,171,48,21]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"77.5.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":932156111,\"moneyMax\":23303902775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":928,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"15.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":871731841,\"moneyMax\":21793296025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":39}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"0.0.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":675416636,\"moneyMax\":16885415900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":877,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"83.6.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":742542248,\"moneyMax\":18563556200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-953287.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[3,11,9,143,108,56,66,181,63,26,117,34,99,138,33,144,36,104,171]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"2.6.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":902002475,\"moneyMax\":22550061875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"68.0.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1133112483,\"moneyMax\":28327812075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-521919.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[10,1,-8,1,-2,-5,8,-9,0,6,2,-5,-5,-10,-7,5,10,1,9,1,5,9,8,-3,-1,1,-5,4,7,9,-8,-7],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-511142.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"60.9.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":827152494,\"moneyMax\":20678812350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":62}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737694-Sector-12.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":989102375,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"63.8.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":578034627,\"moneyMax\":14450865675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"15.5.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":891212508,\"moneyMax\":22280312700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"84.9.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":814521073,\"moneyMax\":20363026825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":74}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"78.8.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1013692244,\"moneyMax\":25342306100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":896,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-249693.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,6,6,-3,1,6,10,8,1,7,7,5,6,-8,7,3,-4,-1,1,-10,-3,-6,8,6,9,-1,2,-1,6,5,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"36.3.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":947773258,\"moneyMax\":23694331450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-94579.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,5,-6,-8,1,6,-2,-10,9,-9,-6,3,-3,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"50.9.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":974714230,\"moneyMax\":24367855750,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-550079.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[25,30],[18,20],[19,25],[12,13],[14,15],[23,29],[2,3],[24,25],[11,20],[16,17],[16,18],[16,24],[18,20],[5,13],[3,11]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"87.3.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":854474362,\"moneyMax\":21361859050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"61.1.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":828621156,\"moneyMax\":20715528900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":80}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736407-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,2],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"60.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1626280770,\"moneyMax\":40657019250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":70}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"88.5.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1749213080,\"moneyMax\":43730327000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"26.7.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1128712171,\"moneyMax\":28217804275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":83}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76713.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()(()a(()aa))(a)a\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-458911.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,8,10,10,0,0,9,3,1,7,0,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"42.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1470728739,\"moneyMax\":36768218475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"29.8.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1072798103,\"moneyMax\":26819952575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":811,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385982.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[67,13,92,107,180,172,169,190,63,185,6,68,112,45,79,120,112,37,68,69,22,124,164,53,56,152,194,1,125,116,15,177,94],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"80.9.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":787075904,\"moneyMax\":19676897600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":658,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-526208.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[88,57,187,62,67,10,53,107,28,70,87,67,66,196,117,90,158,35,94,146,191,150,14],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"15.6.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":606144009,\"moneyMax\":15153600225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"56.0.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":698844478,\"moneyMax\":17471111950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":598,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"55.2.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":275864366,\"moneyMax\":6896609150,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":425,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895821.cct\",\"type\":\"Total Ways to Sum\",\"data\":80,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"11.9.1.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":233690008,\"moneyMax\":5842250200,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":388,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541916.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[38,163,37,190,130,65,93,105,141,147,101,41,55,80,136,125,141,95,150,25,30,139,9,60,98,81,11,173,78,191,49,119,157,101,100,16],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"75.1.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":937190916,\"moneyMax\":23429772900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":773,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-536985-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[77,50,45,82,28,28,177,96,178,76,77,126,187,39,42,137,21,166,136,93,30,81,98,89,88]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"77.2.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///880ad4b6-bb16-462c-b411-a9aa8311e4aa\",\"moduleSequenceNumber\":128},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///ed4bf105-d6aa-4f48-9d81-77863c9ed21c\",\"moduleSequenceNumber\":127},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///c3b10fb5-39f3-44a3-8937-2a54e15f31f0\",\"moduleSequenceNumber\":371}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"summit-uni\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"summit-uni\",\"moduleSequenceNumber\":128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///da94df12-a738-4e85-ac36-24b0b560fce3\",\"moduleSequenceNumber\":720}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///7099744e-8e8f-4ca0-9be2-701a98e90a87\",\"moduleSequenceNumber\":361},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///5244ee14-1c86-442a-821f-c49f10dd14ab\",\"moduleSequenceNumber\":718}],\"dependents\":[],\"ramUsage\":5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":235531050,\"moneyMax\":5888276250,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":437,\"serverGrowth\":47}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-907245.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,6,2,2,0,3,3,0,2,8,7,3,7,0,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"63.1.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":523873761,\"moneyMax\":13096844025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":609,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-782952-Netburners.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[9,2],[3,5,1],[1,2,8,7],[1,9,6,4,6],[3,4,3,6,7,4],[8,4,2,6,1,8,9],[4,7,1,3,6,2,1,1]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"55.1.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":447103909,\"moneyMax\":11177597725,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":435,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982707.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"61428\",83],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-708655.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,9,-5,2,-8,4,5,7,3,2,-7,9,-7,-4,-1,-6,6,-5,9,1,-2,0,10,2,5,-5,8,-4,3,2,-2,10,-5,-6,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"59.1.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///75f7de62-7b87-48f3-a381-29dbfa08d9e0\",\"moduleSequenceNumber\":134},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///6f70f1eb-4b71-4c1e-9eb5-f5f89d969dc3\",\"moduleSequenceNumber\":133},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///a83f8066-b456-462b-b045-5beddf6b83e8\",\"moduleSequenceNumber\":368}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"the-hub\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"the-hub\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///ea951a74-8388-44ef-b72b-899875ad6dab\",\"moduleSequenceNumber\":193}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///cd7109a1-3dbd-4ece-a0ca-c0b7672e2322\",\"moduleSequenceNumber\":110},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///807d4c35-5440-48f7-8893-2023d437be37\",\"moduleSequenceNumber\":717}],\"dependents\":[],\"ramUsage\":5,\"server\":\"the-hub\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":38,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":0,\"moneyMax\":4630998550,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":301,\"serverGrowth\":47}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-945585.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a))))))((a)((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"19.4.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":220205096,\"moneyMax\":5505127400,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":364,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-696999-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,5,9,-4,-4,-7,5,2,-3,10],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"90.0.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///2476212d-7071-4d44-811f-b45716844fa9\",\"moduleSequenceNumber\":140},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///678274d6-1219-46cf-98f0-5fca97f353a0\",\"moduleSequenceNumber\":139},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///dbfff00a-4f55-4152-a816-6ab05d15390f\",\"moduleSequenceNumber\":366}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"netlink\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"netlink\",\"moduleSequenceNumber\":138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"netlink\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"netlink\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///37ee1a2b-af7a-4018-b545-0a9e9053aad5\",\"moduleSequenceNumber\":719}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///64d2fc2f-eef8-4628-b74b-19b67830d7a5\",\"moduleSequenceNumber\":345},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///2a51cee8-c2c6-4b93-bc5e-1178df0f9579\",\"moduleSequenceNumber\":716}],\"dependents\":[],\"ramUsage\":5,\"server\":\"netlink\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":389,\"serverGrowth\":49}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"94.4.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":143}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":80604875,\"moneyMax\":2015121875,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":268,\"serverGrowth\":37}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"49.7.4.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"n00dles\",\"moduleSequenceNumber\":149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"n00dles\",\"moduleSequenceNumber\":152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"n00dles\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":97,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-643721.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7319047871\",-88],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208164.cct\",\"type\":\"Total Ways to Sum\",\"data\":84,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"36.4.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///c94cf6d0-68b4-4bb2-ae06-19400d55991e\",\"moduleSequenceNumber\":158},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///21de7a26-7fec-440a-865b-436413940f72\",\"moduleSequenceNumber\":157},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///daf1af1b-f06d-453a-8ce8-5a81b3d8731d\",\"moduleSequenceNumber\":343}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///5b40abad-b5b4-4507-bff2-c0bddffb902f\",\"moduleSequenceNumber\":194}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///b7ca7c5a-03b0-4bff-81b8-6e26aad73fd4\",\"moduleSequenceNumber\":128},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///430549ba-d6da-4b49-af0c-449f5af99131\",\"moduleSequenceNumber\":705}],\"dependents\":[],\"ramUsage\":5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":30.376000000000005,\"minDifficulty\":3,\"moneyAvailable\":4144280.4986358397,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"47.1.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///a9c056ac-d91c-4332-9b2f-5f3cbd473bde\",\"moduleSequenceNumber\":164},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///c994d55e-d992-41f8-ba7c-722560a820fc\",\"moduleSequenceNumber\":163},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///a69c638d-626a-49ac-9311-ff8b2d4c49c1\",\"moduleSequenceNumber\":345}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///40bd7018-2723-4c9b-9a0e-0ee26ad09cec\",\"moduleSequenceNumber\":195}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///41fecbb0-9791-4fb8-ad8a-076038c5b699\",\"moduleSequenceNumber\":134},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///bc1b9e1d-6381-46dd-ad15-2187ace0953f\",\"moduleSequenceNumber\":706}],\"dependents\":[],\"ramUsage\":5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":423625.7833860837,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"67.2.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///84e5c46a-4123-4249-b091-142a5e95c0d7\",\"moduleSequenceNumber\":170},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///d8b67879-fe34-4d6b-b565-bb392c4e38c3\",\"moduleSequenceNumber\":169},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///0a41f5fb-a152-4561-85a5-a9a237db610b\",\"moduleSequenceNumber\":347}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"joesguns\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"joesguns\",\"moduleSequenceNumber\":170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///ff5a1cb7-8645-4c9d-abf2-3dd4d59e9d6b\",\"moduleSequenceNumber\":196}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///d644936e-f86c-4e92-8590-4aab6adb87bd\",\"moduleSequenceNumber\":140},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///62d1563d-7624-4058-a8bb-a62a7d97cb6d\",\"moduleSequenceNumber\":707}],\"dependents\":[],\"ramUsage\":5,\"server\":\"joesguns\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-544907.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,0,0,0,0,7,7,0,10,6,1,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"99.7.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///d275aa94-7cf6-47b6-9b19-522f0f8d3826\",\"moduleSequenceNumber\":176},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///9665abb9-4f3a-41bd-b834-f375732fd5e9\",\"moduleSequenceNumber\":175},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///17331765-36c5-43fb-8bca-3104068813ad\",\"moduleSequenceNumber\":356}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"zer0\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"zer0\",\"moduleSequenceNumber\":174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zer0\",\"moduleSequenceNumber\":175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"zer0\",\"moduleSequenceNumber\":176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///984afa2f-2d33-49f3-9c3e-47ecfc459e1b\",\"moduleSequenceNumber\":197}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///626ff284-1c68-482b-9474-402f4a98df78\",\"moduleSequenceNumber\":146},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///a3689daa-4dc7-46cd-94fa-005b8f3ead5b\",\"moduleSequenceNumber\":711}],\"dependents\":[],\"ramUsage\":5,\"server\":\"zer0\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-78242.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":705067794,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"68.1.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-958102-MegaCorp.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"763162255\",\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"54.9.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"71.2.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///9a18d5b7-7af7-42da-83dc-3cf67a58690b\",\"moduleSequenceNumber\":182},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///ca7cf0c7-753e-4836-a0e6-afd7f73fa0f6\",\"moduleSequenceNumber\":181},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///046834c9-ca0f-4c2b-ab37-9511e6108732\",\"moduleSequenceNumber\":364}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"silver-helix\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"silver-helix\",\"moduleSequenceNumber\":182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///87e6571c-fecb-4f72-a366-c6a15a706ad1\",\"moduleSequenceNumber\":198}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///654c4374-f595-4534-8092-63c61d4dfefa\",\"moduleSequenceNumber\":152},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///a226cf23-9555-474e-b50c-b30645b83d9b\",\"moduleSequenceNumber\":715}],\"dependents\":[],\"ramUsage\":5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-469993.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[159,3,172,44,161,77,80,76,50,108,81,43,114,154,34,191,97,140,53,4,33,151,98,181],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-639313-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[31,168,178,42,80,152,109,22,152,109,16,184,164,32,37,151,35,122,54,33,68,162,5,72,112,101,120,5,75,100],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"23.4.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///178ccefb-bc62-4c8a-93e9-7a7a74e139f9\",\"moduleSequenceNumber\":188},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///2bcb6b28-ecac-40f2-b8ad-ae64fe08bba2\",\"moduleSequenceNumber\":187},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///7e0f35e9-9c0e-4f62-a0c1-5093c8bb4d5a\",\"moduleSequenceNumber\":349}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///9d834612-9601-4b13-b644-beacfcb20dd5\",\"moduleSequenceNumber\":199}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///eb0eed5e-0395-4174-9c9f-fb45c7e21012\",\"moduleSequenceNumber\":158},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///f9191ce8-3c2b-41cd-a5cb-7df2dbe04ef2\",\"moduleSequenceNumber\":708}],\"dependents\":[],\"ramUsage\":5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":1645523.4519096415,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-608472.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,23],[2,7],[3,11],[10,14],[24,25],[18,19],[18,27],[5,10],[9,17],[15,22],[12,13],[22,26],[6,15],[2,4]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"12.4.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///de2db12a-edf3-4c4f-ab2d-dcb8e5d84693\",\"moduleSequenceNumber\":194},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///f3560e88-3856-408d-9417-1b8bee8432a0\",\"moduleSequenceNumber\":193},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///b299eba3-7366-4877-8360-54a3b85fd5c1\",\"moduleSequenceNumber\":351}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///01d14a48-d78f-4294-a349-d1ebf19229b6\",\"moduleSequenceNumber\":200}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///8c0b5fe3-6165-42d1-960e-1935f0163321\",\"moduleSequenceNumber\":164},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///bbd14e56-a3d1-4ef5-ae79-33d4a78b79d8\",\"moduleSequenceNumber\":709}],\"dependents\":[],\"ramUsage\":5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262531.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":771837980,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"25.4.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///b37ca86f-3994-444f-b83c-7f1d3b1d9501\",\"moduleSequenceNumber\":200},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///f1640a8e-268c-45be-9f7c-f3bf6cb393f9\",\"moduleSequenceNumber\":199},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///16d61eba-14ae-4701-a5db-60f58e58c7b6\",\"moduleSequenceNumber\":362}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"phantasy\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"phantasy\",\"moduleSequenceNumber\":200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///dd04e329-cbfa-48ae-a629-26da527d67b7\",\"moduleSequenceNumber\":201}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///90d3739e-96e0-46cf-aa07-273410a49cc6\",\"moduleSequenceNumber\":170},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///2da7d626-2461-40d9-9c52-9e879ac62ddc\",\"moduleSequenceNumber\":714}],\"dependents\":[],\"ramUsage\":5,\"server\":\"phantasy\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":9.530000000000143,\"minDifficulty\":7,\"moneyAvailable\":60060860.570184834,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"69.3.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///9ca18438-8d65-49a9-84ac-d06b27a50c10\",\"moduleSequenceNumber\":206},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///ca7fa8d9-d9fa-4b71-a546-a9c43f0084db\",\"moduleSequenceNumber\":205},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///3dc27379-e670-4509-9ab7-b9e04cc80241\",\"moduleSequenceNumber\":360}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"max-hardware\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"max-hardware\",\"moduleSequenceNumber\":206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///84b319de-4917-4800-b2aa-e90d3a4f29fc\",\"moduleSequenceNumber\":202}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///a0324c70-801a-4da2-8d1f-934be38cc53c\",\"moduleSequenceNumber\":176},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///4d721369-5141-482e-82e9-f116af4251a4\",\"moduleSequenceNumber\":713}],\"dependents\":[],\"ramUsage\":5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.048,\"minDifficulty\":5,\"moneyAvailable\":108.83614793047309,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"61.1.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":32,\"minDifficulty\":11,\"moneyAvailable\":68147298,\"moneyMax\":1703682450,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":214,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-399113.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[64,29,66,35,149,22,90,21,87,179,11,45,59,171,16,135,191,74,119,158,19,126,133,9,59,189,115,24,156,69,166,113,112,175,168],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"45.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":58475654,\"moneyMax\":1461891350,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":256,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-293269.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[4,5],[6,7,7],[1,9,9,8],[1,7,8,3,5],[9,3,8,5,7,4],[1,6,6,8,5,4,4],[3,5,7,9,5,4,1,6],[2,4,8,1,6,2,1,1,5],[2,5,6,5,8,3,9,2,1,2],[1,6,2,1,7,4,7,5,9,3,1]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"98.2.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///828449c5-3a3f-40e6-899a-52849b2d1327\",\"moduleSequenceNumber\":212},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///0de69b1c-fbb8-46e2-bff4-12f9be99f83d\",\"moduleSequenceNumber\":211},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///83287e9b-60e4-4c3c-83b0-5f9079e87bbf\",\"moduleSequenceNumber\":353}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"iron-gym\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"iron-gym\",\"moduleSequenceNumber\":212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///eb827d7d-ea5f-4c75-ace8-5d6e7eb3c61a\",\"moduleSequenceNumber\":203}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///64cc2324-fec6-4244-8399-3cb501c07534\",\"moduleSequenceNumber\":182},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///e55361ab-44e9-452f-a6f3-631b8dcacbad\",\"moduleSequenceNumber\":710}],\"dependents\":[],\"ramUsage\":5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":50.814,\"minDifficulty\":10,\"moneyAvailable\":2200.958197480592,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"18.1.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":481,\"serverGrowth\":36}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-718615.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"31.7.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1053,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"53.0.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":747,\"serverGrowth\":59}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767910-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[83,45,40,31,44,45,77,177,94,91,127,38,149,192,33,13,148,45,103,110,85,16,105,143,65,36,111,70,179,105,26,179,181,77,11,141,67,29],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"43.4.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-973979.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,0,1,7,9,0,10,6,10,6,7,6,0,8,7,5,3,2,0,4,0,1,6,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"57.3.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":352,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"57.8.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":219,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-574621.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,1],[0,0,0,0,1,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"66.3.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":530,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-319491-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[43,65,133,117,15,102,17,187,20,84,57,129,123,150,69,108,183,186,75,191],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"57.0.6.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///cdf08c45-bfbc-435a-b3f7-d69dcc3a998f\",\"moduleSequenceNumber\":218},{\"filename\":\"/0_access/getRoot.js\",\"url\":\"blob:file:///8c079cc1-9c98-424b-95d4-27854da0a1ee\",\"moduleSequenceNumber\":217},{\"filename\":\"root-spread.js\",\"url\":\"blob:file:///7f38500e-5c05-47c6-92e2-255f8ee10224\",\"moduleSequenceNumber\":358}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"CSEC\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"CSEC\",\"moduleSequenceNumber\":218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/1_hack/standard.js\",\"url\":\"blob:file:///68302340-130f-4285-b895-5664e56ac690\",\"moduleSequenceNumber\":204}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"blob:file:///93441fb8-62a9-44a7-9331-1f1792e3230f\",\"moduleSequenceNumber\":188},{\"filename\":\"spread_att_specific.js\",\"url\":\"blob:file:///83c9949c-eecd-4ff1-94c8-d82b1a4d3752\",\"moduleSequenceNumber\":712}],\"dependents\":[],\"ramUsage\":5,\"server\":\"CSEC\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1.048,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-205792-Netburners.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[110,127,58],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"97.8.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"0.4.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113204-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":486901727,\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"89.1.0.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Add killall?\\n\\nimport {getRoot} from \\\"0_access/getRoot.js\\\" \\nimport {moveScripts} from \\\"0_access/network_move_scripts.js\\\"\\n\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr,knownArr) {\\n    /** \\n     * indexOff searches for the first occurance of a value\\n     * if the value is not found it returns with -1 \\n     * therfore the expression returns all unique values\\n     *  */ \\n    let newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1 )\\n    return newItemArr\\n}\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1,arr2) {\\n\\t// uses spread to merge\\n    let mergeArr = [...arr1, ...arr2] \\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n    let removeDuplicates = [...new Set(mergeArr)]; \\n    return removeDuplicates\\n}\\n\\n\\n/**\\n * \\n * Spread-Root\\n * - \\n * Recursive function to spread network to all servers, root & copy scripts to them\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n\\t/// Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (ns.args[0]) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, ns.args) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (ns.args[0])\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, ns.args)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\n\\t/// runs rooting at server list\\n\\tfor (let targetServer of newConnections) {\\n\\t\\t// a) roots target\\n\\t\\tlet rooted = await getRoot(ns, targetServer); // imported function\\n\\t\\tif (rooted) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, targetServer); // imported function\\n\\t\\t\\t// c) runs \\\"spread-root.js\\\" from target again (recursion)\\n\\t\\t\\t\\t// it does not attack known server by sending them as param\\n\\t\\t\\t\\t// this is necesarry to avoid recursion loop!\\n\\t\\t\\tns.exec(\\\"root-spread.js\\\", targetServer, 1, ...knownConnections);\\n\\t\\t}else{ // d) if root not succesful skip it\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"root-spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"darkweb\",\"moduleSequenceNumber\":221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * \\trun: \\n * \\t\\trun att_neighbour \\\"NAME\\\"  \\n * \\tdesc:\\n * \\t\\truns attack current server to connected server\\n * \\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0] && typeof(ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst ATTACK_SERVER = ns.args[0];\\n\\tconst HOST = ns.getHostname();\\n\\n\\t\\n\\t\\n\\t/**\\tcalculate threads\\n\\t * \\t@param {number} reserveHacknetScript - if hacknet is not running yet, reserve the ram for it\\n\\t * \\t@param {number} availableRam - subtract used ram from the total\\n\\t * \\t@param {number} attScriptRam - needed to attack server\\n\\t */\\n\\n\\t// TODO: THIS IS NOT UP_TO_DATE ANYMORE => there are new files!\\n\\tlet reserveHacknetScript = 0;\\n\\tif(HOST === \\\"home\\\" && !ns.scriptRunning(\\\"hacknet.js\\\", \\\"home\\\")) {\\n\\t\\treserveHacknetScript = ns.getScriptRam(\\\"/2_hacknet/orchestrate_cluster.js\\\");\\n\\t\\tns.tprint(`\\\\nINFO: Reserved additional ${reserveHacknetScript}GB ram for \\\"orchestrate_cluster.js\\\"`);\\n\\n\\t}\\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST) - reserveHacknetScript; // returns: int\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\")\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.tprint(`\\\\nINFO: ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\n\\t// run attack script\\n\\tlet run = ns.run(\\\"/1_hack/standard.js\\\", THREADS, ATTACK_SERVER, THREADS);\\n\\t(run)\\n\\t\\t? ns.tprint(`\\\\nINFO: Hack @${ATTACK_SERVER} started with ${THREADS} threads`)\\n\\t\\t: ns.tprint(`\\\\nERROR: Hack @${ATTACK_SERVER} failed`);\\n\\n}\",\"filename\":\"att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/// get access to all networks\\n// TODO => add non directly linked\\n\\n/** \\n * portOperations\\n * - checks if port programs exists and runs them on target\\t\\n * @param {NS} ns\\n * @param {string} target which server it should be used on\\n * **/\\nexport async function portOperations(ns, target) {\\t\\n\\t// try to open all ports\\n\\t(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.brutessh(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SSH tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.ftpcrack(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No FTP tool yet\\\");\\t\\n\\n\\t(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.relaysmtp(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SMTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.httpworm(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No HTTP tool yet\\\");\\n\\n\\t(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n\\t\\t? ns.sqlinject(target)\\n\\t\\t: ns.tprint(\\\"ERROR: No SQL tool yet\\\");\\n}\\n\\n\\n/** @param {NS} ns \\n *\\t@param {String} target\\n * \\t@returns {Bool} true/false\\n */\\nexport async function getRoot(ns, target) {\\n\\t// enough hack-skill?\\n\\tlet skillNeeded = ns.getServerRequiredHackingLevel(target);\\n\\tif (ns.getHackingLevel() < skillNeeded) {\\n\\t\\tns.tprint(`INFO: Skipping ${target} - skill ${skillNeeded} needed`)\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// open up ports\\n\\tawait portOperations(ns, target)\\n\\t\\n\\t// Nuke server\\n\\tns.nuke(target);\\n\\n\\t// check success \\n\\tlet hasRoot = ns.hasRootAccess(target);\\n\\tif (hasRoot) {\\n\\t\\tns.tprint(`INFO: Got root @${target}.`)\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.tprint(`ERROR: Not sufficient port tools for ${target}.`)\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/0_access/getRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function moveScripts(ns, target) {\\n\\tconst HOST = ns.getHostname()\\n\\tconst TARGET = target;\\n\\n\\tlet files = [\\n\\t\\t\\t\\\"root-spread.js\\\",\\n\\t\\t\\t\\\"att_specific.js\\\",\\n\\t\\t\\t\\\"/0_access/getRoot.js\\\",\\n\\t\\t\\t\\\"/0_access/network_move_scripts.js\\\",\\n\\t\\t\\t\\\"/1_hack/standard.js\\\",\\n\\t\\t\\t\\\"spread_att_specific.js\\\"\\t\\t\\t\\n\\t\\t];\\n\\n\\t// push infiltrations scripts to server connected\\n\\tlet result = await ns.scp(files, HOST, TARGET); // returns: true\\n\\t(result) \\n\\t\\t? ns.tprint(`INFO: Script copied to connected \\\"${TARGET}\\\"`) \\n\\t\\t: ns.tprint(`ERROR: Could not move scripts to \\\"${TARGET}\\\"`)\\n\\treturn;\\n}\",\"filename\":\"/0_access/network_move_scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"darkweb\",\"moduleSequenceNumber\":224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"///////////////////\\n/// TODO:\\n/// \\t- write grow function\\n/// in calling function ==> threads (number) - Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with.\\n///////////////////\\n/**\\n * Hacking Operations\\n */\\nexport async function tryToHack(ns, HOST, THREADS) {\\n\\tlet result = await ns.hack(HOST, { threads: THREADS });\\n\\tif (!result) {\\n\\t\\treturn false\\n\\t} else {\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n/**\\n * Weaken Security Level\\n * \\t- runs until minimum is reached\\n */\\nexport async function weakenSecurityLevel(ns, HOST, THREADS) {\\n\\tlet minLvl = ns.getServerMinSecurityLevel(HOST); // returns: 3\\n\\tlet currentLvl = ns.getServerSecurityLevel(HOST); // returns: 3.45\\n\\n\\twhile (currentLvl !== minLvl) {\\n\\t\\tawait ns.weaken(HOST, { threads: THREADS })\\n\\t\\tcurrentLvl = ns.getServerSecurityLevel(HOST);\\n\\t\\tns.print(`${HOST}'s security level is ${currentLvl} of ${minLvl}`)\\n\\t}\\n\\tns.print(`Reached min security level of ${HOST}: ${currentLvl} of ${minLvl}`)\\n\\treturn\\n}\\n\\n/**\\t\\n * staticGrowth()\\n * \\t- runs growth 5 times in a row\\n * @param {NS} ns \\n * @param (String) HOST - target server\\n * **/\\nexport async function staticGrowth(ns, HOST) {\\n\\tfor (let i = 0; i < 5; i++){\\n\\t\\tlet money = ns.getServerMoneyAvailable(HOST)\\n\\t\\tns.print(`INFO: Money on ${HOST}: ${money.toLocaleString('en-US',{maximumFractionDigits:0})}`)\\n\\t\\tawait ns.grow(HOST);\\n\\t}\\n}\\n\\n/**\\t\\n * percentageGrowth()\\n * - keeps running growth() until acceptable availabale server money\\n * @param {NS} ns \\n * @param {String} TARGET target server\\n * @param {String} aim_percentage threshold % to stop growth() (relates to ServerMaxMoney)\\n * */\\nexport async function percentageGrowth(ns, TARGET, aim_percentage) {\\t\\n\\tlet maxMoney = ns.getServerMaxMoney(TARGET) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\tlet aimMoney = maxMoney * aim_percentage; // threshold to stop growth()\\n\\n\\tns.print(`INFO: Start to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\twhile(currentMoney < aimMoney) {\\t\\n\\t\\tawait ns.grow(TARGET);\\n\\t\\tcurrentMoney = ns.getServerMoneyAvailable(TARGET)\\n\\t\\tns.print(`INFO: grow() aim | ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ / ${aimMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\t}\\n\\tns.print(`INFO: Finished to .grow() money on @${TARGET}: current ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$`);\\n\\n}\\n\\n\\n/** @param {NS} ns \\n * \\tHOW TO CALL \\\"run standard.js -t 5 \\\"foodnstuff\\\" 5\\\"\\n * \\t==> the second number defines the number of threads running in the hacking\\n * **/\\nexport async function main(ns) {\\n\\n\\t// PARAM HOST required\\n\\tif (!ns.args[0] && typeof (ns.args[0]) != String) {\\n\\t\\tns.tprint(`ERROR: func expects param \\\"hostname\\\" as string`)\\n\\t\\treturn\\n\\t}\\n\\tconst HOST = ns.args[0];\\n\\n\\t// PARAM THREADS optional; default = 1\\n\\tconst THREADS = (ns.args[1]) ? ns.args[1] : 1;\\n\\tns.tprint(`INFO: @${HOST} with ${THREADS} threads`)\\n\\n\\t// Config | grow()\\n\\t\\t// currently: percentageGrowth()\\n\\tlet maxMoney = ns.getServerMaxMoney(HOST) // this seems to be no hard limit - the growth rate will decrease\\n\\tlet currentMoney = ns.getServerMoneyAvailable(HOST)\\n\\tlet min_percentage = 0.05; // threshold % before growth() (relates to ServerMaxMoney)\\n\\tlet aim_percentage = 0.1; // threshold % to stop growth() (relates to ServerMaxMoney)\\n\\tlet minMoney =  maxMoney * min_percentage; // min threshold to start growth()\\n\\n\\twhile (true) {\\n\\t\\t// grow()\\n\\t\\t\\t// by percentageGrowth()\\n\\t\\tif(currentMoney < minMoney) {\\n\\t\\t\\tns.print(`ERROR: Low money @${HOST} - reached ${currentMoney.toLocaleString('en-US',{maximumFractionDigits:0})}`);\\n\\t\\t\\tns.print(`INFO: ${HOST} should have ${minMoney.toLocaleString('en-US',{maximumFractionDigits:0})}\\\\$ before continueing.`);\\n\\t\\t\\tawait percentageGrowth(ns, HOST , aim_percentage);\\n\\t\\t}\\n\\t\\t// hack()\\n\\t\\tlet hackSuccess = await tryToHack(ns, HOST, THREADS);\\n\\t\\t// weaken()\\n\\t\\t\\t// to lowest security level\\n\\t\\tif (!hackSuccess) {\\n\\t\\t\\tns.print(`ERROR: hacking ${HOST} failed.\\\\nStarting proces to lower security level`);\\n\\t\\t\\tawait weakenSecurityLevel(ns, HOST, THREADS);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/1_hack/standard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { moveScripts } from \\\"0_access/network_move_scripts.js\\\";\\n\\n/** filterIntersectingItems()\\n * -\\n * - takes checkArr and removes items which intersect with knownArr\\n * @param {[string]} checkArr\\n * @param {[string]} knownArr\\n * @returns {[string]} new items in checkArr\\n */\\nfunction filterIntersectingItems(checkArr, knownArr) {\\n\\t/** \\n\\t * indexOff searches for the first occurance of a value\\n\\t * if the value is not found it returns with -1 \\n\\t * therfore the expression returns all unique values\\n\\t *  */\\n\\tlet newItemArr = checkArr.filter(item => knownArr.indexOf(item) == -1)\\n\\treturn newItemArr\\n}\\n\\n\\n/** mergeWithoutDuplicates()\\n * -\\n * - merges two arrays into new array of unique values \\n * @param {[string]} arr1\\n * @param {[string]} arr2\\n * @returns {[string]}\\n */\\nfunction mergeWithoutDuplicates(arr1, arr2) {\\n\\t// uses spread to merge\\n\\tlet mergeArr = [...arr1, ...arr2]\\n\\t// uses set to filter down duplicates\\n\\t// uses spread to create an array of set items\\n\\tlet removeDuplicates = [...new Set(mergeArr)];\\n\\treturn removeDuplicates\\n}\\n\\n/**\\n * \\n * spread_att_specific.js\\n * - \\n * Recursive function to atttack a specific server and spread the same commmand to every other servers in the network\\n * - runs getRoot()\\n * \\t- success =>\\n * \\t\\t- copy script to target\\n * \\t\\t- repeat this script from target (next connection layer)\\n * \\t- fail =>  \\n * \\t\\t- skip server & mark down as \\\"visited\\\"\\n *  @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif(!ns.args[0]) {\\n\\t\\tns.tprint(\\\"ERROR: Please define target server before running the script\\\")\\n\\t\\treturn\\n\\t}\\n\\t\\n\\tconst TARGET_SERVER = ns.args.slice(0,1); // first param\\n\\tconst CONNECTON_PARAMS = ns.args.slice(1,); // all the other params\\n\\n\\t/// A) Recursion preps\\n\\tlet scannedConnections = ns.scan(); // get connected servers\\n\\t// we need to know which servers are new here => root\\n\\tlet newConnections = (CONNECTON_PARAMS.length > 0) // check for servers received as params\\n\\t\\t? filterIntersectingItems(scannedConnections, CONNECTON_PARAMS) \\n\\t\\t// else: all scanned connections are new\\n\\t\\t: [...scannedConnections];\\n\\t// we need to know which servers are already known => skip\\n\\tlet knownConnections = (CONNECTON_PARAMS.length > 0)\\n\\t\\t? mergeWithoutDuplicates(scannedConnections, CONNECTON_PARAMS)\\n\\t\\t// else: scanned connections are all connections known\\n\\t\\t: [...scannedConnections];\\n\\t\\n\\t\\n\\t/// B) move scripts\\n\\tfor (let spreadServer of newConnections) {\\n\\t\\t// a) check if has root to move scripts\\n\\t\\tif (ns.hasRootAccess(spreadServer)) {\\n\\t\\t\\t// b) copies scripts to target\\n\\t\\t\\tawait moveScripts(ns, spreadServer); // imported function\\n\\t\\t\\t// exec this script\\n\\t\\t\\tlet targetAndConnections = [TARGET_SERVER, ...knownConnections]\\n\\t\\t\\tns.exec(\\\"spread_att_specific.js\\\", spreadServer, 1, ...targetAndConnections);\\n\\t\\t\\t\\n\\t\\t}else{ // c) if not root - skipe\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// C) attack sever\\n\\t\\t// check threads\\n\\tconst HOST = ns.getHostname();\\n\\tlet attScriptRam = ns.getScriptRam(\\\"/1_hack/standard.js\\\") \\n\\tlet availableRam = ns.getServerMaxRam(HOST) - ns.getServerUsedRam(HOST); // returns: int\\n\\tconst THREADS = Math.floor(availableRam / attScriptRam);\\n\\tns.print(`\\\\nINFO: | ${THREADS} threads | ${availableRam} / ${attScriptRam}`);\\n\\tif (THREADS < 1) {\\n\\t\\tns.tprint(`\\\\nERROR: Not enough threads (${THREADS}) on ${HOST} available`)\\n\\t\\treturn\\n\\t}\\n\\t\\n\\t// run attack on target server\\n\\tlet res = await ns.run(\\\"/1_hack/standard.js\\\", THREADS, ...TARGET_SERVER, THREADS)\\n\\tns.tprint(`ERROR: TEST ${TARGET_SERVER}`);\\n\\tif(res) {\\n\\t\\tns.tprint(`\\\\nINFO: Hack @${TARGET_SERVER} from ${HOST} started with ${THREADS}`)\\n\\t} else {\\n\\t\\tns.tprint(`\\\\nERROR: Hack @${TARGET_SERVER} from ${HOST} failed`);\\n\\t}\\n}\\n\\n\\n// TODO: Error TARGET_SERVER STIMM NICHT => Ich attackier auf einnaml RANDOM Seriver\\n// VERMUTUNG => Die Arrays neu zu sortieren bringt Chaos rein\",\"filename\":\"spread_att_specific.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"server\":\"darkweb\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":350866.95430561836,\"favor\":89.9966,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.9814,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0457,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0327,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":393981.9826275676}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":93.7643,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":644939.9566497261}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":127.7774,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":2.2091,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":205.4419,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":923879.4918430068}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":113.9473,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":646184.4442108098}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":82.4042,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":450642.8900338828}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":87.1655,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":172469.77675985027}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":12931.155723920896,\"lastPrice\":12889.227518976832,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":17.89171843251511,\"otlkMagForecast\":68.3029853548093,\"cap\":170215428,\"spreadPerc\":0.4,\"shareTxForMovement\":36082,\"shareTxUntilMovement\":36082,\"totalShares\":138500000,\"maxShares\":27700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":11355.32852870005,\"lastPrice\":11317.729030326042,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":21.821512240258247,\"otlkMagForecast\":30.343568654889904,\"cap\":67619914,\"spreadPerc\":0.5,\"shareTxForMovement\":61153,\"shareTxUntilMovement\":61153,\"totalShares\":95400000,\"maxShares\":19100000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":16035.466188780998,\"lastPrice\":16114.265325723203,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":17.88131315843482,\"otlkMagForecast\":68.78205610640748,\"cap\":86410940,\"spreadPerc\":0.1,\"shareTxForMovement\":66288,\"shareTxUntilMovement\":66288,\"totalShares\":70800000,\"maxShares\":14200000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":12790.42918129113,\"lastPrice\":12731.391106857425,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":8.962133730703936,\"otlkMagForecast\":59.59608193437095,\"cap\":205974872,\"spreadPerc\":0.5,\"shareTxForMovement\":57581,\"shareTxUntilMovement\":57581,\"totalShares\":76800000,\"maxShares\":15400000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":41488.561327127005,\"lastPrice\":41314.13580587265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":11.79597212257368,\"otlkMagForecast\":36.48718932899301,\"cap\":818132646,\"spreadPerc\":0.2,\"shareTxForMovement\":81328,\"shareTxUntilMovement\":81328,\"totalShares\":51900000,\"maxShares\":10400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":454675.222022416,\"lastPrice\":451394.8175941942,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":false,\"otlkMag\":6.814860640850361,\"otlkMagForecast\":41.50442988629852,\"cap\":1586082393,\"spreadPerc\":0.5,\"shareTxForMovement\":49268,\"shareTxUntilMovement\":49268,\"totalShares\":27500000,\"maxShares\":5500000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":23429.093415345156,\"lastPrice\":23565.305704531012,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":16.879214605491413,\"otlkMagForecast\":32.14505292726804,\"cap\":305782851,\"spreadPerc\":0.7,\"shareTxForMovement\":66415,\"shareTxUntilMovement\":66415,\"totalShares\":106700000,\"maxShares\":21300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":262183.2493656873,\"lastPrice\":264469.67462012515,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":false,\"otlkMag\":7.142122598983932,\"otlkMagForecast\":45.15515038808179,\"cap\":469983890,\"spreadPerc\":0.8,\"shareTxForMovement\":40972,\"shareTxUntilMovement\":40972,\"totalShares\":60000000,\"maxShares\":12000000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":6122.331645518285,\"lastPrice\":6160.044410953836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":true,\"otlkMag\":6.282662580546424,\"otlkMagForecast\":54.83414473822914,\"cap\":32012708,\"spreadPerc\":0.2,\"shareTxForMovement\":50519,\"shareTxUntilMovement\":50519,\"totalShares\":49200000,\"maxShares\":9800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":2113.7951489692878,\"lastPrice\":2122.7194508696434,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":9.396819756126726,\"otlkMagForecast\":59.79806240528844,\"cap\":8379479,\"spreadPerc\":0.3,\"shareTxForMovement\":89973,\"shareTxUntilMovement\":89973,\"totalShares\":139800000,\"maxShares\":28000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":7302.033729902284,\"lastPrice\":7332.357039973895,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":12.040337690878271,\"otlkMagForecast\":36.819812239178475,\"cap\":28086720,\"spreadPerc\":0.8,\"shareTxForMovement\":89408,\"shareTxUntilMovement\":89408,\"totalShares\":61000000,\"maxShares\":12200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":6564.964483410434,\"lastPrice\":6529.264102593202,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.607998343236417,\"otlkMagForecast\":52.10559933033518,\"cap\":94243564,\"spreadPerc\":1,\"shareTxForMovement\":105974,\"shareTxUntilMovement\":105974,\"totalShares\":74500000,\"maxShares\":14900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":12883.181979653147,\"lastPrice\":12824.599296126378,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":5.9834734698728695,\"otlkMagForecast\":44.29367328693281,\"cap\":119717226,\"spreadPerc\":1,\"shareTxForMovement\":95702,\"shareTxUntilMovement\":95702,\"totalShares\":63000000,\"maxShares\":12600000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":289058.9164955475,\"lastPrice\":290079.2404157548,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":11.061760716230605,\"otlkMagForecast\":36.235078806369344,\"cap\":85032016,\"spreadPerc\":0.3,\"shareTxForMovement\":84069,\"shareTxUntilMovement\":84069,\"totalShares\":43300000,\"maxShares\":8700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":10013.731465508306,\"lastPrice\":10052.543417868243,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":5.527592635944428,\"otlkMagForecast\":55.83355730970758,\"cap\":105873814,\"spreadPerc\":0.7,\"shareTxForMovement\":54996,\"shareTxUntilMovement\":54996,\"totalShares\":65200000,\"maxShares\":13000000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":26596.174472965122,\"lastPrice\":26469.764687880703,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":2.0955492759269307,\"otlkMagForecast\":52.77677174985718,\"cap\":174157626,\"spreadPerc\":0.6,\"shareTxForMovement\":121764,\"shareTxUntilMovement\":121764,\"totalShares\":52500000,\"maxShares\":10500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":40718.12448719414,\"lastPrice\":40918.21552475568,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":10.879373606188507,\"otlkMagForecast\":37.37354401576175,\"cap\":169067579,\"spreadPerc\":1.1,\"shareTxForMovement\":104437,\"shareTxUntilMovement\":104437,\"totalShares\":41300000,\"maxShares\":8300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":7761.4951259877425,\"lastPrice\":7794.800828631403,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":8.65093236991783,\"otlkMagForecast\":59.278468479503076,\"cap\":62992086,\"spreadPerc\":0.4,\"shareTxForMovement\":111496,\"shareTxUntilMovement\":111496,\"totalShares\":36300000,\"maxShares\":7300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":49610.9046534442,\"lastPrice\":49368.30616132598,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.588878241916115,\"otlkMagForecast\":45.17995354657399,\"cap\":319123728,\"spreadPerc\":1,\"shareTxForMovement\":51104,\"shareTxUntilMovement\":51104,\"totalShares\":25300000,\"maxShares\":5100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":573.3635679974843,\"lastPrice\":583.1654296639672,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.47,\"b\":false,\"otlkMag\":19.714286690200247,\"otlkMagForecast\":31.925888136189545,\"cap\":44028065,\"spreadPerc\":1.2,\"shareTxForMovement\":41586,\"shareTxUntilMovement\":41586,\"totalShares\":97600000,\"maxShares\":19500000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":12916.514354064248,\"lastPrice\":12801.333554807417,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":9.08385244493455,\"otlkMagForecast\":55.8139240837285,\"cap\":120459417,\"spreadPerc\":0.8,\"shareTxForMovement\":84946,\"shareTxUntilMovement\":84946,\"totalShares\":53200000,\"maxShares\":10600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":11985.18965885787,\"lastPrice\":12033.301771347506,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":5.228824464641333,\"otlkMagForecast\":54.32950934837895,\"cap\":139395715,\"spreadPerc\":0.9,\"shareTxForMovement\":90569,\"shareTxUntilMovement\":90569,\"totalShares\":27800000,\"maxShares\":5600000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":579266.1656066047,\"lastPrice\":587364.7862034795,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.02,\"b\":true,\"otlkMag\":23.22132634519093,\"otlkMagForecast\":69.1210504513416,\"cap\":16576921,\"spreadPerc\":0.7,\"shareTxForMovement\":65548,\"shareTxUntilMovement\":65548,\"totalShares\":36200000,\"maxShares\":7200000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":967268.2387704073,\"lastPrice\":956936.1275845504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.56,\"b\":false,\"otlkMag\":10.288325736756793,\"otlkMagForecast\":39.44741967882982,\"cap\":50505196,\"spreadPerc\":0.7,\"shareTxForMovement\":77705,\"shareTxUntilMovement\":77705,\"totalShares\":38300000,\"maxShares\":7700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":7120.024622255977,\"lastPrice\":7079.356567355311,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":7.016274952729293,\"otlkMagForecast\":45.04595304165425,\"cap\":51903696,\"spreadPerc\":0.5,\"shareTxForMovement\":88499,\"shareTxUntilMovement\":88499,\"totalShares\":66500000,\"maxShares\":13300000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2128555.8339695917,\"lastPrice\":2163471.0645389636,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.37,\"b\":false,\"otlkMag\":9.452001533958336,\"otlkMagForecast\":42.08635706495557,\"cap\":26628120,\"spreadPerc\":0.5,\"shareTxForMovement\":24058,\"shareTxUntilMovement\":24058,\"totalShares\":13100000,\"maxShares\":2600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":163286.4418451838,\"lastPrice\":162253.29306093024,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.92,\"b\":true,\"otlkMag\":6.341243004833388,\"otlkMagForecast\":58.72998166056236,\"cap\":176358535,\"spreadPerc\":0.5,\"shareTxForMovement\":49167,\"shareTxUntilMovement\":49167,\"totalShares\":7600000,\"maxShares\":1500000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":5795.155341579947,\"lastPrice\":5825.237421935221,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":8.177633265099042,\"otlkMagForecast\":42.91016578132741,\"cap\":26181238,\"spreadPerc\":0.8,\"shareTxForMovement\":136454,\"shareTxUntilMovement\":136454,\"totalShares\":13600000,\"maxShares\":2700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":940.5298964978939,\"lastPrice\":928.4490477742949,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.88,\"b\":true,\"otlkMag\":1.2878386300550477,\"otlkMagForecast\":44.49635210719524,\"cap\":48332544,\"spreadPerc\":1,\"shareTxForMovement\":43970,\"shareTxUntilMovement\":43970,\"totalShares\":14000000,\"maxShares\":2800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1.097897597418997,\"lastPrice\":1.076148728780556,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.92,\"b\":true,\"otlkMag\":31.118792865044654,\"otlkMagForecast\":80.38921643,\"cap\":412460,\"spreadPerc\":1.1,\"shareTxForMovement\":29436,\"shareTxUntilMovement\":29436,\"totalShares\":143800000,\"maxShares\":28800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":41636.66674922354,\"lastPrice\":41239.91931314055,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.39,\"b\":false,\"otlkMag\":19.68426383379486,\"otlkMagForecast\":32.040859798521275,\"cap\":12594393,\"spreadPerc\":0.5,\"shareTxForMovement\":37323,\"shareTxUntilMovement\":37323,\"totalShares\":170400000,\"maxShares\":34100000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":13141.441381903265,\"lastPrice\":13073.577728115364,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":11.171585402050708,\"otlkMagForecast\":38.7400294302369,\"cap\":298982729,\"spreadPerc\":0.4,\"shareTxForMovement\":190579,\"shareTxUntilMovement\":190579,\"totalShares\":21200000,\"maxShares\":4200000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":16056.728564676216,\"lastPrice\":16125.630318568257,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":10.156360185288476,\"otlkMagForecast\":62.110221124788204,\"cap\":100642309,\"spreadPerc\":1,\"shareTxForMovement\":152702,\"shareTxUntilMovement\":152702,\"totalShares\":18600000,\"maxShares\":3700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":1201843,\"lastUpdate\":1645264476246,\"ticksUntilCycle\":47}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"de\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":2,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1645264476822","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1645264476836"}}